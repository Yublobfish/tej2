{"version":3,"sources":["../src/player/provider.ts","../src/player/utils.ts"],"sourcesContent":["import {\n  ChangePayload,\n  ParticipantChange,\n  SetAttributeInput,\n  SubAttributesPayload,\n} from \"@empirica/tajriba\";\nimport { groupBy, Observable, Subject } from \"rxjs\";\nimport { AttributeChange, AttributeUpdate } from \"../shared/attributes\";\nimport { ScopeIdent, ScopeUpdate } from \"../shared/scopes\";\nimport { StepChange, StepUpdate } from \"./steps\";\n\nexport interface ParticipantUpdate {\n  participant: ParticipantChange;\n  removed: boolean;\n}\n\nexport class TajribaProvider {\n  public scopes = new Subject<ScopeUpdate>();\n  public attributes = new Subject<AttributeUpdate>();\n  public participants = new Subject<ParticipantUpdate>();\n  public steps = new Subject<StepUpdate>();\n  public dones = new Subject<void>();\n\n  constructor(\n    changes: Observable<ChangePayload>,\n    readonly globals: Observable<SubAttributesPayload>,\n    readonly setAttributes: (input: SetAttributeInput[]) => Promise<any>\n  ) {\n    changes.pipe(groupBy((chg) => chg.change.__typename)).subscribe({\n      next: (group) => {\n        switch (group.key) {\n          case \"ScopeChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.scopes.next({\n                  scope: <ScopeIdent>scope.change,\n                  removed: scope.removed,\n                });\n\n                // console.log(\n                //   \"ScopeChange\",\n                //   (<ScopeIdent>scope.change).kind,\n                //   scope.done\n                // );\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"AttributeChange\":\n            group.subscribe({\n              next: (attribute) => {\n                this.attributes.next({\n                  attribute: <AttributeChange>attribute.change,\n                  removed: attribute.removed,\n                });\n\n                // console.log(\n                //   \"AttributeChange\",\n                //   (<AttributeChange>attribute.change).key,\n                //   attribute.done\n                // );\n\n                if (attribute.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"ParticipantChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.participants.next({\n                  participant: <ParticipantChange>scope.change,\n                  removed: scope.removed,\n                });\n\n                // console.log(\n                //   \"ParticipantChange\",\n                //   <ParticipantChange>scope.change,\n                //   scope.done\n                // );\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"StepChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.steps.next({\n                  step: <StepChange>scope.change,\n                  removed: scope.removed,\n                });\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n        }\n      },\n    });\n  }\n}\n","export const isDevelopment = process.env.NODE_ENV === \"development\";\nexport const isProduction = process.env.NODE_ENV === \"production\";\nexport const isTest = process.env.NODE_ENV === \"test\";\n\nexport const createNewParticipant = (key = \"participantKey\") => {\n  const url = new URL(document.location.href);\n  url.searchParams.set(key, new Date().getTime().toString());\n  window.open(url.href, \"_blank\")?.focus();\n};\n"],"mappings":";AAMA,SAAS,SAAqB,eAAe;AAUtC,IAAM,kBAAN,MAAsB;AAAA,EAO3B,YACE,SACS,SACA,eACT;AAFS;AACA;AATX,SAAO,SAAS,IAAI,QAAqB;AACzC,SAAO,aAAa,IAAI,QAAyB;AACjD,SAAO,eAAe,IAAI,QAA2B;AACrD,SAAO,QAAQ,IAAI,QAAoB;AACvC,SAAO,QAAQ,IAAI,QAAc;AAO/B,YAAQ,KAAK,QAAQ,CAAC,QAAQ,IAAI,OAAO,UAAU,CAAC,EAAE,UAAU;AAAA,MAC9D,MAAM,CAAC,UAAU;AACf,gBAAQ,MAAM,KAAK;AAAA,UACjB,KAAK;AACH,kBAAM,UAAU;AAAA,cACd,MAAM,CAAC,UAAU;AACf,qBAAK,OAAO,KAAK;AAAA,kBACf,OAAmB,MAAM;AAAA,kBACzB,SAAS,MAAM;AAAA,gBACjB,CAAC;AAQD,oBAAI,MAAM,MAAM;AACd,uBAAK,MAAM,KAAK;AAAA,gBAClB;AAAA,cACF;AAAA,YACF,CAAC;AAED;AAAA,UACF,KAAK;AACH,kBAAM,UAAU;AAAA,cACd,MAAM,CAAC,cAAc;AACnB,qBAAK,WAAW,KAAK;AAAA,kBACnB,WAA4B,UAAU;AAAA,kBACtC,SAAS,UAAU;AAAA,gBACrB,CAAC;AAQD,oBAAI,UAAU,MAAM;AAClB,uBAAK,MAAM,KAAK;AAAA,gBAClB;AAAA,cACF;AAAA,YACF,CAAC;AAED;AAAA,UACF,KAAK;AACH,kBAAM,UAAU;AAAA,cACd,MAAM,CAAC,UAAU;AACf,qBAAK,aAAa,KAAK;AAAA,kBACrB,aAAgC,MAAM;AAAA,kBACtC,SAAS,MAAM;AAAA,gBACjB,CAAC;AAQD,oBAAI,MAAM,MAAM;AACd,uBAAK,MAAM,KAAK;AAAA,gBAClB;AAAA,cACF;AAAA,YACF,CAAC;AAED;AAAA,UACF,KAAK;AACH,kBAAM,UAAU;AAAA,cACd,MAAM,CAAC,UAAU;AACf,qBAAK,MAAM,KAAK;AAAA,kBACd,MAAkB,MAAM;AAAA,kBACxB,SAAS,MAAM;AAAA,gBACjB,CAAC;AAED,oBAAI,MAAM,MAAM;AACd,uBAAK,MAAM,KAAK;AAAA,gBAClB;AAAA,cACF;AAAA,YACF,CAAC;AAED;AAAA,QACJ;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACjHO,IAAM,gBAAgB,QAAQ,IAAI,aAAa;AAC/C,IAAM,eAAe,QAAQ,IAAI,aAAa;AAC9C,IAAM,SAAS,QAAQ,IAAI,aAAa;AAExC,IAAM,uBAAuB,CAAC,MAAM,qBAAqB;AAJhE;AAKE,QAAM,MAAM,IAAI,IAAI,SAAS,SAAS,IAAI;AAC1C,MAAI,aAAa,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC;AACzD,eAAO,KAAK,IAAI,MAAM,QAAQ,MAA9B,mBAAiC;AACnC;","names":[]}