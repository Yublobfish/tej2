import { S as ScopeConstructor } from './globals-1dc2e2b1.js';
export { a as Attribute, b as AttributeOptions, d as ScopeUpdate } from './globals-1dc2e2b1.js';
import { T as TajribaConnection } from './tajriba_connection-7db9ed97.js';
export { T as TajribaConnection } from './tajriba_connection-7db9ed97.js';
import { b as AdminConnection, c as Subscriber, L as ListenersCollector, F as Finalizer, h as AddLinkPayload, i as AddTransitionPayload } from './context-b178e5b6.js';
export { b as AdminConnection, A as AdminContext, a as Attributes, E as EventContext, L as ListenersCollector, S as Scope, f as ScopeSubscriptionInput, d as Scopes, g as Subs, c as Subscriber, e as Subscriptions, T as TajribaEvent } from './context-b178e5b6.js';
export { P as Participant, T as Transition, p as participantsSub, t as transitionsSub } from './transitions-1e0ddc64.js';
import * as _empirica_tajriba from '@empirica/tajriba';
import { AddScopeInput, AddGroupInput, LinkInput, AddStepInput, TransitionInput, SetAttributeInput } from '@empirica/tajriba';
import { Observable, BehaviorSubject } from 'rxjs';

declare class Runloop<Context, Kinds extends {
    [key: string]: ScopeConstructor<Context, Kinds>;
}> {
    private conn;
    private ctx;
    private kinds;
    private subs;
    private evtctx;
    private participants;
    private connections;
    private transitions;
    private scopesSub;
    private attributesSub;
    private donesSub;
    private attributes;
    private finalizers;
    private groupPromises;
    private stepPromises;
    private scopePromises;
    private linkPromises;
    private transitionPromises;
    private attributeInputs;
    private scopes;
    private cake;
    private running;
    private stopped;
    constructor(conn: AdminConnection, ctx: Context, kinds: Kinds, globalScopeID: string, subs: Observable<Subscriber<Context, Kinds> | ListenersCollector<Context, Kinds>>, stop: Observable<void>);
    private postCallback;
    stop(): Promise<void>;
    addFinalizer(cb: Finalizer): void;
    addScopes(inputs: AddScopeInput[]): Promise<{
        __typename: "Scope";
        id: string;
        name?: string | null | undefined;
        kind?: string | null | undefined;
        createdAt: any;
        createdBy: {
            __typename: "Participant";
            id: string;
            identifier: string;
            createdAt: any;
        } | {
            __typename: "Service";
            id: string;
            name: string;
            createdAt: any;
        } | {
            __typename: "User";
            id: string;
            username: string;
            name: string;
            createdAt: any;
        };
        attributes: {
            __typename: "AttributeConnection";
            totalCount: number;
            pageInfo: {
                __typename: "PageInfo";
                hasNextPage: boolean;
                hasPreviousPage: boolean;
                startCursor?: any;
                endCursor?: any;
            };
            edges: {
                __typename: "AttributeEdge";
                cursor: any;
                node: {
                    __typename: "Attribute";
                    id: string;
                    createdAt: any;
                    private: boolean;
                    protected: boolean;
                    immutable: boolean;
                    deletedAt?: any;
                    key: string;
                    val?: string | null | undefined;
                    index?: number | null | undefined;
                    current: boolean;
                    version: number;
                    vector: boolean;
                    createdBy: {
                        __typename: "Participant";
                        id: string;
                        identifier: string;
                        createdAt: any;
                    } | {
                        __typename: "Service";
                        id: string;
                        name: string;
                        createdAt: any;
                    } | {
                        __typename: "User";
                        id: string;
                        username: string;
                        name: string;
                        createdAt: any;
                    };
                    node: {
                        __typename: "Attribute";
                        id: string;
                    } | {
                        __typename: "Group";
                        id: string;
                    } | {
                        __typename: "Link";
                        id: string;
                    } | {
                        __typename: "Participant";
                        id: string;
                    } | {
                        __typename: "Scope";
                        kind?: string | null | undefined;
                        name?: string | null | undefined;
                        id: string;
                    } | {
                        __typename: "Step";
                        id: string;
                    } | {
                        __typename: "Transition";
                        id: string;
                    } | {
                        __typename: "User";
                        id: string;
                    };
                };
            }[];
        };
    }[]>;
    addGroups(inputs: AddGroupInput[]): Promise<{
        __typename: "Group";
        id: string;
    }[]>;
    addLinks(inputs: LinkInput[]): Promise<AddLinkPayload[]>;
    addSteps(inputs: AddStepInput[]): Promise<{
        __typename: "Step";
        id: string;
        createdAt: any;
        duration: number;
        startedAt?: any;
        endedAt?: any;
        state: _empirica_tajriba.State;
        createdBy: {
            __typename: "Participant";
            id: string;
            identifier: string;
            createdAt: any;
        } | {
            __typename: "Service";
            id: string;
            name: string;
            createdAt: any;
        } | {
            __typename: "User";
            id: string;
            username: string;
            name: string;
            createdAt: any;
        };
        transitions: {
            __typename: "TransitionConnection";
            totalCount: number;
            pageInfo: {
                __typename: "PageInfo";
                hasNextPage: boolean;
                hasPreviousPage: boolean;
                startCursor?: any;
                endCursor?: any;
            };
            edges: {
                __typename: "TransitionEdge";
                cursor: any;
                node: {
                    __typename: "Transition";
                    id: string;
                    createdAt: any;
                    from: _empirica_tajriba.State;
                    to: _empirica_tajriba.State;
                    createdBy: {
                        __typename: "Participant";
                        id: string;
                        identifier: string;
                        createdAt: any;
                    } | {
                        __typename: "Service";
                        id: string;
                        name: string;
                        createdAt: any;
                    } | {
                        __typename: "User";
                        id: string;
                        username: string;
                        name: string;
                        createdAt: any;
                    };
                    node: {
                        __typename: "Attribute";
                    } | {
                        __typename: "Group";
                    } | {
                        __typename: "Link";
                    } | {
                        __typename: "Participant";
                    } | {
                        __typename: "Scope";
                    } | {
                        __typename: "Step";
                        id: string;
                        duration: number;
                        state: _empirica_tajriba.State;
                        startedAt?: any;
                        endedAt?: any;
                    } | {
                        __typename: "Transition";
                    } | {
                        __typename: "User";
                    };
                };
            }[];
        };
    }[]>;
    addTransitions(inputs: TransitionInput[]): Promise<AddTransitionPayload[]>;
    setAttributes(inputs: SetAttributeInput[]): Promise<void>;
    private loadAllScopes;
    private processNewScopesSub;
    private processNewSub;
    private get taj();
}

declare class TokenProvider {
    private sub;
    readonly tokens: BehaviorSubject<string | null | undefined>;
    constructor(taj: TajribaConnection, storage: SavedTokenStorage, serviceName: string, serviceRegistrationToken: string);
    get token(): string | null | undefined;
    stop(): void;
}
interface SavedTokenStorage {
    tokens: BehaviorSubject<string | null | undefined>;
    updateToken: (token: string) => Promise<void>;
    clearToken: () => Promise<void>;
}
declare class FileTokenStorage {
    protected serviceTokenFile: string;
    private _tokens;
    private constructor();
    static init(serviceTokenFile: string, resetToken: Observable<void>): Promise<FileTokenStorage>;
    private readToken;
    private writeToken;
    private deleteTokenFile;
    get tokens(): BehaviorSubject<string | null | undefined>;
    get token(): string | null | undefined;
    updateToken(token: string): Promise<void>;
    clearToken(): Promise<void>;
}

export { FileTokenStorage, Runloop, TokenProvider };
