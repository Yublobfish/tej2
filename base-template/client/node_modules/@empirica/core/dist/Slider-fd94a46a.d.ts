import React, { ChangeEventHandler } from 'react';
import { W as WithChildren, a as ConsentProps, b as PlayerCreateProps } from './helpers-8ea4d2b4.js';
import { g as Attributable } from './globals-1dc2e2b1.js';
import { G as Game, P as Player, R as Round, S as Stage } from './classic-6d218ebb.js';
import { a as StepTick } from './provider-3e575146.js';

declare type StepsFunc = (props: {
    game?: Game;
    player?: Player;
}) => React.ElementType[] | undefined;
declare type StepsProps = WithChildren<{
    steps: React.ElementType[] | StepsFunc;
    progressKey: string;
    doneKey: string;
    object?: Attributable;
}>;
declare function Steps({ steps, progressKey, doneKey, object, children, }: StepsProps): JSX.Element;

interface EmpiricaContextProps {
    children: React.ReactNode;
    noGames?: React.ElementType;
    consent?: React.ElementType<ConsentProps>;
    playerCreate?: React.ElementType<PlayerCreateProps>;
    lobby?: React.ElementType;
    introSteps: React.ElementType[] | StepsFunc;
    exitSteps: React.ElementType[] | StepsFunc;
    finished?: React.ElementType;
    loading?: React.ElementType;
    connecting?: React.ElementType;
    unmanagedGame: boolean;
    unmanagedAssignment: boolean;
    disableConsent: boolean;
    disableNoGames: boolean;
    disableURLParamsCapture: boolean;
}
declare function EmpiricaContext({ noGames: NoGamesComp, consent: ConsentComp, playerCreate: PlayerCreateForm, introSteps, lobby, exitSteps, finished, loading: LoadingComp, connecting: ConnectingComp, unmanagedGame, unmanagedAssignment, disableConsent, disableNoGames, disableURLParamsCapture, children, }: EmpiricaContextProps): JSX.Element;

declare function Sweeper(): JSX.Element | null;

declare function usePlayer(): Player | undefined;
declare function useGame(): Game | undefined;
declare function useRound(): Round | undefined;
declare function useStage(): Stage | undefined;
declare function useStageTimer(): StepTick | undefined;
declare function usePlayers(): Player[] | undefined;
declare function usePartModeCtx<M>(): M | undefined;
declare function usePartModeCtxKey<M, K extends keyof M, R>(name: K): R | undefined;

declare function Lobby(): JSX.Element;

declare function Quiz({ next }: {
    next: () => void;
}): JSX.Element;

interface SliderProps {
    value: number;
    onChange: ChangeEventHandler<HTMLInputElement>;
    min?: number;
    max?: number;
    stepSize?: number;
    disabled?: boolean;
}
declare function Slider({ value, onChange, min, max, stepSize, disabled, }: SliderProps): JSX.Element;

export { EmpiricaContext as E, Lobby as L, Quiz as Q, Sweeper as S, EmpiricaContextProps as a, usePartModeCtx as b, usePartModeCtxKey as c, usePlayer as d, usePlayers as e, useRound as f, useStage as g, useStageTimer as h, Slider as i, SliderProps as j, Steps as k, StepsFunc as l, StepsProps as m, useGame as u };
