{"version":3,"sources":["../src/player/classic/react/index.ts","../src/player/classic/react/EmpiricaContext.tsx","../src/player/react/Consent.tsx","../src/player/react/Finished.tsx","../src/player/react/hooks.ts","../src/player/react/EmpiricaParticipant.tsx","../src/player/context.ts","../src/admin/observables.ts","../src/utils/console.ts","../src/shared/globals.ts","../src/shared/tajriba_connection.ts","../src/utils/object.ts","../src/player/connection.ts","../src/player/provider.ts","../src/player/react/Loading.tsx","../src/player/react/NoGames.tsx","../src/player/utils.ts","../src/player/react/PlayerCreate.tsx","../src/player/classic/react/hooks.ts","../src/player/classic/react/Lobby.tsx","../src/player/classic/react/Steps.tsx","../src/player/classic/react/examples/Sweeper.tsx","../src/player/classic/react/Quiz.tsx","../src/player/classic/react/Slider.tsx"],"sourcesContent":["export { EmpiricaContext } from \"./EmpiricaContext\";\nexport type { EmpiricaContextProps } from \"./EmpiricaContext\";\nexport { Sweeper } from \"./examples/Sweeper\";\nexport {\n  useGame,\n  usePartModeCtx,\n  usePartModeCtxKey,\n  usePlayer,\n  usePlayers,\n  useRound,\n  useStage,\n  useStageTimer,\n} from \"./hooks\";\nexport { Lobby } from \"./Lobby\";\nexport { Quiz } from \"./Quiz\";\nexport { Slider } from \"./Slider\";\nexport type { SliderProps } from \"./Slider\";\nexport { Steps } from \"./Steps\";\nexport type { StepsFunc, StepsProps } from \"./Steps\";\n","import React from \"react\";\nimport { Consent, ConsentProps } from \"../../react/Consent\";\nimport { Finished } from \"../../react/Finished\";\nimport {\n  useConsent,\n  useGlobal,\n  usePartConnected,\n  usePlayerID,\n  useTajribaConnected,\n} from \"../../react/hooks\";\nimport { Loading } from \"../../react/Loading\";\nimport { NoGames } from \"../../react/NoGames\";\nimport { PlayerCreate, PlayerCreateProps } from \"../../react/PlayerCreate\";\nimport { useGame, usePlayer, useRound, useStage } from \"./hooks\";\nimport { Lobby as DefaultLobby } from \"./Lobby\";\nimport { Steps, StepsFunc } from \"./Steps\";\n\nexport interface EmpiricaContextProps {\n  children: React.ReactNode;\n  noGames?: React.ElementType;\n  consent?: React.ElementType<ConsentProps>;\n  playerCreate?: React.ElementType<PlayerCreateProps>;\n  lobby?: React.ElementType;\n  introSteps: React.ElementType[] | StepsFunc;\n  exitSteps: React.ElementType[] | StepsFunc;\n  finished?: React.ElementType;\n  loading?: React.ElementType;\n  connecting?: React.ElementType;\n\n  // An unmanaged game will render the children as soon as the Game is available\n  // whether the round or stage are available or not. It is up to the developer\n  // to handle the presence of the round and stage.\n  // Everything else is still managed: the consent, the player, the intro\n  // steps, the lobby, and the game.\n  // This is not recommended for most games.\n  // This is useful for games that want to persist render state between rounds\n  // or stages. E.g. keep a video chat up between stages.\n  unmanagedGame: boolean;\n\n  // Unmanaged assignement will render the children as soon as the player is\n  // connected. It is up to the developer to handle everything after the player\n  // is connected: intro steps, lobby, game, round, stage and exit steps.\n  unmanagedAssignment: boolean;\n\n  // Disable the consent screen. It is up to the developer to handle the consent\n  // screen.\n  disableConsent: boolean;\n\n  // Disable the NoGames screen. It is up to the developer to handle the NoGames\n  // condition.\n  disableNoGames: boolean;\n\n  // Disable capturing URL params (?what=hello&some=thing) onto the Player under\n  // the `urlParams` key.\n  disableURLParamsCapture: boolean;\n}\n\nexport function EmpiricaContext({\n  noGames: NoGamesComp = NoGames,\n  consent: ConsentComp = Consent,\n  playerCreate: PlayerCreateForm = PlayerCreate,\n  introSteps = [],\n  lobby = DefaultLobby,\n  exitSteps = [],\n  finished = Finished,\n  loading: LoadingComp = Loading,\n  connecting: ConnectingComp = Loading,\n  unmanagedGame = false,\n  unmanagedAssignment = false,\n  disableConsent = false,\n  disableNoGames = false,\n  disableURLParamsCapture = false,\n  children,\n}: EmpiricaContextProps) {\n  const tajribaConnected = useTajribaConnected();\n  const participantConnected = usePartConnected();\n  const globals = useGlobal();\n  const player = usePlayer();\n  const game = useGame();\n  const [connecting, hasPlayer, onPlayerID] = usePlayerID();\n  const [consented, onConsent] = useConsent();\n\n  if (!tajribaConnected) {\n    return <ConnectingComp />;\n  }\n\n  if (player && player.get(\"ended\")) {\n    return <Exit exitSteps={exitSteps} finished={finished} />;\n  }\n\n  // If globals not yet loaded or we are connected to participant but player\n  // hasn't loaded yet.\n  if (!globals || (participantConnected && !player)) {\n    return <LoadingComp />;\n  }\n\n  if (!disableNoGames && !game && !globals.get(\"experimentOpen\")) {\n    return <NoGamesComp />;\n  }\n\n  if (!disableConsent && !consented) {\n    return <ConsentComp onConsent={onConsent!} />;\n  }\n\n  if (!player && (!hasPlayer || connecting)) {\n    return (\n      <PlayerCreateForm onPlayerID={onPlayerID!} connecting={connecting} />\n    );\n  }\n\n  if (!player) {\n    return <LoadingComp />;\n  }\n\n  if (!disableURLParamsCapture && !player.get(\"urlParams\")) {\n    const urlParams = new URLSearchParams(window.location.search);\n    player.set(\"urlParams\", Object.fromEntries(urlParams.entries()));\n  }\n\n  if (unmanagedAssignment) {\n    return <>{children}</>;\n  }\n\n  if (game && game.hasEnded) {\n    return <Exit exitSteps={exitSteps} finished={finished} />;\n  }\n\n  return (\n    <Steps progressKey=\"intro\" doneKey=\"introDone\" steps={introSteps}>\n      <EmpiricaInnerContext\n        exitSteps={exitSteps}\n        lobby={lobby}\n        finished={finished}\n        loading={LoadingComp}\n        unmanagedGame={unmanagedGame}\n      >\n        {children}\n      </EmpiricaInnerContext>\n    </Steps>\n  );\n}\n\ninterface EmpiricaInnerContextProps {\n  children: React.ReactNode;\n  lobby: React.ElementType;\n  exitSteps: React.ElementType[] | StepsFunc;\n  finished: React.ElementType;\n  loading: React.ElementType;\n  unmanagedGame: boolean;\n}\n\nfunction EmpiricaInnerContext({\n  children,\n  lobby: Lobby,\n  finished,\n  exitSteps,\n  loading: LoadingComp,\n  unmanagedGame = false,\n}: EmpiricaInnerContextProps) {\n  const game = useGame();\n  const stage = useStage();\n  const round = useRound();\n\n  if (!game) {\n    return <Lobby />;\n  }\n\n  if (game.hasEnded) {\n    return <Exit exitSteps={exitSteps} finished={finished} />;\n  }\n\n  if (!unmanagedGame && (!stage || !round)) {\n    return <LoadingComp />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Exit({\n  exitSteps,\n  finished: Finished,\n}: {\n  exitSteps: React.ElementType[] | StepsFunc;\n  finished: React.ElementType;\n}) {\n  return (\n    <Steps progressKey=\"exitStep\" doneKey=\"exitStepDone\" steps={exitSteps}>\n      <Finished />\n    </Steps>\n  );\n}\n","import React from \"react\";\n\nexport interface ConsentProps {\n  title?: string;\n  text?: string;\n  buttonText?: string;\n  onConsent: () => void;\n}\n\nconst defaultTitle = \"Do you consent to participate in this experiment?\";\n\nconst defaultText = `This experiment is part of a scientific project. Your decision\nto participate in this experiment is entirely voluntary. There\nare no known or anticipated risks to participating in this\nexperiment. There is no way for us to identify you. The only\ninformation we will have, in addition to your responses, is\nthe timestamps of your interactions with our site. The results\nof our research may be presented at scientific meetings or\npublished in scientific journals. Clicking on the \"I AGREE\"\nbutton indicates that you are at least 18 years of age, and\nagree to participate voluntary.`;\n\nconst defaultButtonText = \"I AGREE\";\n\nexport function Consent({\n  title = defaultTitle,\n  text = defaultText,\n  buttonText = defaultButtonText,\n  onConsent,\n}: ConsentProps) {\n  return (\n    <div\n      className=\"relative h-full z-10 overflow-y-auto\"\n      aria-labelledby=\"modal-title\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n    >\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          aria-hidden=\"true\"\n        ></div>\n\n        <span\n          className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n          aria-hidden=\"true\"\n        >\n          &#8203;\n        </span>\n\n        <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6\">\n          <div>\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\n              <svg\n                className=\"h-6 w-6 text-green-600\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M5 13l4 4L19 7\"\n                />\n              </svg>\n            </div>\n            <div className=\"mt-3 sm:mt-5\">\n              <h3\n                className=\"text-lg text-center leading-6 font-medium text-gray-900\"\n                id=\"modal-title\"\n              >\n                {title}\n              </h3>\n              <div className=\"mt-2\">\n                <div className=\"text-sm text-gray-500 text-justify\">{text}</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-5 sm:mt-6\">\n            <button\n              type=\"button\"\n              className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-empirica-600 text-base font-medium text-white hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500 sm:text-sm\"\n              onClick={onConsent}\n            >\n              {buttonText}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Finished() {\n  return (\n    <div className=\"h-full flex flex-col items-center justify-center\">\n      <h2 className=\"font-medium text-gray-700\">Finished</h2>\n      <p className=\"mt-2 text-gray-400\">Thank you for participating</p>\n    </div>\n  );\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { merge, Observable } from \"rxjs\";\nimport { Globals } from \"../../shared/globals\";\nimport { TajribaConnection } from \"../../shared/tajriba_connection\";\nimport { Session } from \"../connection\";\nimport { ParticipantContext } from \"../context\";\nimport { ParticipantCtx } from \"./EmpiricaParticipant\";\n\nexport function useParticipantContext() {\n  return useContext(ParticipantCtx);\n}\n\nexport function useTajribaConnecting() {\n  return useTajribaCtxKey<boolean, \"connecting\">(\"connecting\");\n}\n\nexport function useTajribaConnected() {\n  return useTajribaCtxKey<boolean, \"connected\">(\"connected\");\n}\n\nexport function usePartConnecting() {\n  return usePartCtxKey<boolean, \"connecting\">(\"connecting\");\n}\n\nexport function usePartConnected() {\n  return usePartCtxKey<boolean, \"connected\">(\"connected\");\n}\n\nexport function useTajriba() {\n  const ctx = useParticipantContext();\n  return ctx?.tajriba;\n}\n\nexport function useGlobal() {\n  const ctx = usePartCtxKey<Globals, \"globals\">(\"globals\");\n  const [val, setVal] = useState<{ g: Globals | undefined }>({ g: undefined });\n\n  useEffect(() => {\n    if (!ctx || !ctx.self) {\n      return;\n    }\n\n    const sub = ctx.self.subscribe({\n      next(g) {\n        setVal({ g });\n      },\n    });\n\n    return sub.unsubscribe.bind(sub);\n  }, [ctx]);\n\n  return val.g;\n}\n\nconst defaultConsentKey = \"empirica:consent\";\n\nexport function useConsent(\n  ns: string = \"\"\n): [boolean, (() => void) | undefined] {\n  const key = `${defaultConsentKey}${ns ? `:${ns}` : \"\"}`;\n  const getConsented = () => Boolean(window.localStorage[key]);\n  const [consented, setConsented] = useState(getConsented());\n\n  function onConsent() {\n    window.localStorage[key] = true;\n    setConsented(true);\n  }\n\n  return [consented, consented ? undefined : onConsent];\n}\n\nexport function usePlayerID(): [\n  boolean,\n  string | undefined,\n  ((v: string) => void) | undefined\n] {\n  const ctx = useParticipantContext();\n  const [connecting, setConnecting] = useState<boolean>(true);\n  const [playerID, setPlayerID] = useState<string | undefined>(undefined);\n  const [changePlayerID, setChangePlayerID] = useState<\n    ((v: string) => void) | undefined\n  >(undefined);\n\n  useEffect(() => {\n    if (!ctx) {\n      return;\n    }\n\n    let _connecting = true;\n    let session: Session | undefined;\n    const sub = merge(\n      ctx.participant.connecting,\n      ctx.session.sessions\n    ).subscribe({\n      next(sessionOrConnecting) {\n        if (typeof sessionOrConnecting === \"boolean\") {\n          setConnecting(sessionOrConnecting);\n          _connecting = sessionOrConnecting;\n        } else {\n          session = sessionOrConnecting;\n        }\n\n        if (_connecting) {\n          setPlayerID(undefined);\n          setChangePlayerID(undefined);\n        } else if (!session) {\n          setPlayerID(undefined);\n          setChangePlayerID(() => async (playerIdentifier: string) => {\n            await ctx.register(playerIdentifier);\n          });\n        } else {\n          setPlayerID(session.participant.identifier);\n          setChangePlayerID(undefined);\n        }\n      },\n    });\n\n    return sub.unsubscribe.bind(sub);\n  }, [ctx]);\n\n  return [connecting, playerID, changePlayerID];\n}\n\nfunction useTajribaCtxKey<T, K extends keyof TajribaConnection>(name: K) {\n  return useCtxKey<T, TajribaConnection, K>(useTajriba, name);\n}\n\nfunction usePartCtxKey<T, K extends keyof ParticipantContext>(name: K) {\n  return useCtxKey<T, ParticipantContext, K>(useParticipantContext, name);\n}\n\nfunction useCtxKey<T, O extends {}, K extends keyof O>(\n  ctxFunc: () => O | undefined,\n  name: K\n) {\n  const ctx = ctxFunc();\n  const [val, setVal] = useState<T | undefined>(undefined);\n\n  useEffect(() => {\n    if (!ctx || !ctx[name]) {\n      return;\n    }\n\n    const obs = (<unknown>ctx[name]) as Observable<T>;\n\n    const sub = obs.subscribe({\n      next(g) {\n        setVal(g);\n      },\n    });\n\n    return sub.unsubscribe.bind(sub);\n  }, [ctx]);\n\n  return val;\n}\n","import React from \"react\";\nimport { Mode, ParticipantContext, ParticipantModeContext } from \"../context\";\nimport { WithChildren } from \"./helpers\";\n\nexport const ParticipantCtx = React.createContext<\n  ParticipantContext | undefined\n>(undefined);\n\nexport type EmpiricaParticipantProps = WithChildren<{\n  url: string;\n  ns: string;\n  modeFunc?: Mode<any>;\n}>;\n\n// We want to only initialize the connection once per namespace, so we keep\n// previously created connections.\n// TODO: cleanup old connections.\n// It's ok to just keep the previous connection for simple cases where we're\n// only using one connection, but if EmpiricaParticipant is used multiple times\n// on a page, and some are reset, we would be leaking connections.\nconst contexts: { [key: string]: ParticipantContext } = {};\n\nexport function EmpiricaParticipant({\n  url,\n  ns,\n  modeFunc,\n  children,\n}: EmpiricaParticipantProps) {\n  let partCtx: ParticipantContext;\n\n  if (ns in contexts) {\n    partCtx = contexts[ns]!;\n  } else {\n    if (modeFunc) {\n      partCtx = new ParticipantModeContext(url, ns, modeFunc);\n    } else {\n      partCtx = new ParticipantContext(url, ns);\n    }\n\n    contexts[ns] = partCtx;\n  }\n\n  return (\n    <ParticipantCtx.Provider value={partCtx}>\n      {children}\n    </ParticipantCtx.Provider>\n  );\n}\n","import { TajribaParticipant } from \"@empirica/tajriba\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { subscribeAsync } from \"../admin/observables\";\nimport { Globals } from \"../shared/globals\";\nimport {\n  ErrNotConnected,\n  TajribaConnection,\n} from \"../shared/tajriba_connection\";\nimport { warn } from \"../utils/console\";\nimport { bsu } from \"../utils/object\";\nimport { ParticipantConnection, ParticipantSession } from \"./connection\";\nimport { TajribaProvider } from \"./provider\";\n\nexport class ParticipantContext {\n  readonly tajriba: TajribaConnection;\n  readonly participant: ParticipantConnection;\n  readonly session: ParticipantSession;\n  readonly resetSession: Subject<void>;\n  readonly provider = bsu<TajribaProvider>();\n  readonly globals = bsu<Globals>();\n\n  constructor(url: string, ns: string) {\n    this.tajriba = new TajribaConnection(url);\n    this.resetSession = new Subject<void>();\n    this.session = new ParticipantSession(ns, this.resetSession);\n    this.participant = new ParticipantConnection(\n      this.tajriba,\n      this.session.sessions,\n      this.resetSession.next.bind(this.resetSession)\n    );\n\n    subscribeAsync(this.participant.connected, async (connected) => {\n      const part = this.participant.participant.getValue();\n\n      if (connected && part) {\n        if (!this.provider.getValue()) {\n          this.provider.next(\n            new TajribaProvider(\n              part.changes(),\n              this.tajriba.tajriba.globalAttributes(),\n              part.setAttributes.bind(part)\n            )\n          );\n        }\n      } else {\n        const provider = this.provider.getValue();\n        if (provider) {\n          this.provider.next(undefined);\n        }\n      }\n    });\n\n    subscribeAsync(this.tajriba.connected, async (connected) => {\n      if (connected) {\n        this.globals.next(new Globals(this.tajriba.tajriba.globalAttributes()));\n      } else {\n        const glob = this.globals.getValue();\n        if (glob) {\n          this.globals.next(undefined);\n        }\n      }\n    });\n  }\n\n  get connecting() {\n    return this.participant.connecting;\n  }\n\n  get connected() {\n    return this.participant.connected;\n  }\n\n  async register(playerIdentifier: string) {\n    if (!this.tajriba.connected.getValue()) {\n      throw ErrNotConnected;\n    }\n\n    const [token, participant] = await this.tajriba.tajriba.registerParticipant(\n      playerIdentifier\n    );\n\n    if (!token) {\n      throw new Error(\"invalid registration\");\n    }\n\n    this.session.updateSession(token, participant);\n  }\n\n  stop() {\n    this.tajriba.stop();\n    this.participant.stop();\n  }\n}\n\nexport type Mode<T> = (participantID: string, provider: TajribaProvider) => T;\n\nexport class ParticipantMode<T> {\n  private _mode = new BehaviorSubject<T | undefined>(undefined);\n\n  constructor(\n    participant: BehaviorSubject<TajribaParticipant | undefined>,\n    provider: BehaviorSubject<TajribaProvider | undefined>,\n    modeFunc: Mode<T>\n  ) {\n    subscribeAsync(provider, async (provider) => {\n      const id = participant.getValue()?.id;\n\n      // TODO Fix! Hack. If we detect this condition, reload\n      // We are getting a new provider while we already had one. Presumably\n      // the player is gone (tajriba reset), but we're still getting a\n      // provider, while we shouldn't.\n      if (id && provider && this._mode.getValue()) {\n        warn(\"spurious provider condition\");\n        window.location.reload();\n      }\n\n      if (id && provider) {\n        this._mode.next(modeFunc(id, provider));\n      } else {\n        const mode = this._mode.getValue();\n        if (mode) {\n          this._mode.next(undefined);\n        }\n      }\n    });\n  }\n\n  get mode() {\n    return this._mode;\n  }\n}\n\nexport class ParticipantModeContext<T> extends ParticipantContext {\n  private _mode: ParticipantMode<T>;\n\n  constructor(url: string, ns: string, modeFunc: Mode<T>) {\n    super(url, ns);\n    this._mode = new ParticipantMode<T>(\n      this.participant.participant,\n      this.provider,\n      modeFunc\n    );\n  }\n\n  get mode() {\n    return this._mode.mode;\n  }\n}\n","import { Observable, Subject, concatMap, takeUntil } from \"rxjs\";\nimport { warn } from \"../utils/console\";\n\nexport async function awaitObsValue<T>(\n  obs: Observable<T>,\n  value: T\n): Promise<T> {\n  let res: (value: T) => void;\n  const prom = new Promise<T>((r) => {\n    res = r;\n  });\n\n  const unsub = obs.subscribe((val) => {\n    if (val === value) {\n      res(val);\n    }\n  });\n\n  const val = await prom;\n  unsub.unsubscribe();\n\n  return val;\n}\n\nexport async function awaitObsValueExist<T>(obs: Observable<T>): Promise<T> {\n  let res: (value: T) => void;\n  const prom = new Promise<T>((r) => {\n    res = r;\n  });\n\n  const unsub = obs.subscribe((val) => {\n    if (val) {\n      res(val);\n    }\n  });\n\n  const val = await prom;\n  unsub.unsubscribe();\n\n  return val;\n}\n\nexport async function awaitObsValueChange<T>(obs: Observable<T>): Promise<T> {\n  let res: (value: T) => void;\n  const prom = new Promise<T>((r) => {\n    res = r;\n  });\n\n  let once = false;\n  let v: T;\n  const unsub = obs.subscribe((val) => {\n    if (once && val !== v) {\n      res(val);\n    }\n    once = true;\n    v = val;\n  });\n\n  const val = await prom;\n  unsub.unsubscribe();\n\n  return val;\n}\n\n// This does not behave correctly with a ReplaySubject\nexport function subscribeAsync<T>(\n  obs: Observable<T>,\n  fn: (val: T) => Promise<any>\n) {\n  const cancel = new Subject<void>();\n  obs.pipe(concatMap(fn), takeUntil(cancel)).subscribe();\n  return {\n    closed: false,\n    unsubscribe() {\n      if (this.closed) {\n        warn(\"closing a closed async observable subscription\");\n        return;\n      }\n      this.closed = true;\n      cancel.next();\n      cancel.unsubscribe();\n    },\n  };\n}\n\nexport interface AsyncObserver<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Unsubscribable {\n  unsubscribe(): void;\n}\n\nexport interface AsyncSubscribable<T> {\n  subscribe(observer: Partial<AsyncObserver<T>>): Promise<Unsubscribable>;\n}\n\n// A ReplaySubject that supports async subscribers\nexport class AsyncReplaySubject<T> {\n  private values: T[] = [];\n  private subscribers: ((val: T) => Promise<void>)[] = [];\n\n  async next(value: T) {\n    this.values.push(value);\n    for (const sub of this.subscribers) {\n      await sub(value);\n    }\n  }\n\n  async subscribe({ next }: { next: (val: T) => Promise<void> }) {\n    this.subscribers.push(next);\n    for (const v of this.values) {\n      await next(v);\n    }\n\n    let closed = false;\n    return {\n      get closed() {\n        return closed;\n      },\n      unsubscribe: () => {\n        if (closed) {\n          warn(\"closing a closed async observable subscription\");\n          return;\n        }\n\n        closed = true;\n        this.subscribers = this.subscribers.filter((s) => s !== next);\n      },\n    };\n  }\n}\n\n// A Subject that supports async subscribers\nexport class AsyncSubject<T> {\n  private subscribers: ((val: T) => Promise<void>)[] = [];\n\n  constructor(private value: T) {}\n\n  async next(value: T) {\n    for (const sub of this.subscribers) {\n      await sub(value);\n    }\n  }\n\n  async subscribe({ next }: { next: (val: T) => Promise<void> }) {\n    this.subscribers.push(next);\n    await next(this.value);\n\n    let closed = false;\n    return {\n      get closed() {\n        return closed;\n      },\n      unsubscribe: () => {\n        if (closed) {\n          warn(\"closing a closed async observable subscription\");\n          return;\n        }\n\n        closed = true;\n        this.subscribers = this.subscribers.filter((s) => s !== next);\n      },\n    };\n  }\n}\n","/* c8 ignore start */\n\nconst isBrowser =\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nenum Color {\n  Bold = 1,\n\n  Black = 30,\n  Red,\n  Green,\n  Yellow,\n  Blue,\n  Magenta,\n  Cyan,\n  White,\n\n  DarkGray = 90,\n}\n\nexport type LogLine = { level: string; args: any[] };\nclass LogsMock {\n  public logs: LogLine[] = [];\n\n  log(line: LogLine) {\n    this.logs.push(line);\n  }\n\n  clear() {\n    this.logs = [];\n  }\n}\n\nlet logsMock: LogsMock | undefined;\nexport function captureLogs(cb: () => void): LogLine[] {\n  const lm = mockLogging();\n  cb();\n  const ret = lm.logs;\n  stopMockLogging();\n\n  return ret;\n}\n\nexport async function captureLogsAsync(\n  cb: () => Promise<void>\n): Promise<LogLine[]> {\n  const lm = mockLogging();\n  await cb();\n  const ret = lm.logs;\n  stopMockLogging();\n\n  return ret;\n}\n\nexport function mockLogging() {\n  if (!logsMock) {\n    logsMock = new LogsMock();\n  }\n\n  return logsMock;\n}\n\nexport function stopMockLogging() {\n  logsMock = undefined;\n}\n\nconst colorHex = {\n  [Color.Bold]: \"font-weight: bold\",\n  [Color.Black]: \"color: #000000\",\n  [Color.Red]: \"color: #cc0000\",\n  [Color.Green]: \"color: #4e9a06\",\n  [Color.Yellow]: \"color: #c4a000\",\n  [Color.Blue]: \"color: #729fcf\",\n  [Color.Magenta]: \"color: #75507b\",\n  [Color.Cyan]: \"color: #06989a\",\n  [Color.White]: \"color: #d3d7cf\",\n  [Color.DarkGray]: \"color: #555753\",\n};\n\nexport const levels: { [key: string]: number } = {\n  trace: 0,\n  debug: 1,\n  log: 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n};\n\nconst reversLevels: { [key: number]: string } = {};\nfor (const key in levels) {\n  reversLevels[levels[key]!] = key;\n}\n\nlet currentLevel = 2;\n\nexport function setLogLevel(level: keyof typeof levels) {\n  const lvl = levels[level];\n  if (lvl === undefined) {\n    return;\n  }\n\n  currentLevel = lvl;\n}\n\nfunction formatConsoleDate(date: Date, level: string[]) {\n  var hour = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var milliseconds = date.getMilliseconds();\n\n  const str =\n    (hour < 10 ? \"0\" + hour : hour) +\n    \":\" +\n    (minutes < 10 ? \"0\" + minutes : minutes) +\n    \":\" +\n    (seconds < 10 ? \"0\" + seconds : seconds) +\n    \".\" +\n    (\"00\" + milliseconds).slice(-3);\n\n  if (isBrowser) {\n    const ts = colorize(str, Color.DarkGray).concat(level);\n    return [ts[0] + \" \" + level[0], ts[1], level[1]];\n  }\n\n  return colorize(str, Color.DarkGray).concat(level);\n}\n\nconst createLogger = (lvl: number, level: string[]) => {\n  return (...args: any[]) => {\n    if (lvl < currentLevel) {\n      return;\n    }\n\n    if (logsMock) {\n      logsMock.log({ level: reversLevels[lvl]!, args: args });\n\n      return;\n    }\n\n    if (args.length === 1) {\n      switch (typeof args[0]) {\n        case \"string\":\n          for (const line of args[0].split(\"\\n\")) {\n            console.log(...formatConsoleDate(new Date(), level).concat(line));\n          }\n          return;\n\n        case \"object\":\n          if (args[0] instanceof Error) {\n            const error = args[0] as Error;\n            const prettyErr =\n              error.name +\n              \": \" +\n              error.message.replace(new RegExp(`^${error.name}[: ]*`), \"\") +\n              \"\\n\" +\n              (error.stack || \"\")\n                .split(\"\\n\")\n                .map((line) => line.trim())\n                .map((line) => {\n                  if (line.startsWith(error.name + \": \" + error.message))\n                    return null;\n\n                  if (line.startsWith(\"at\")) {\n                    return \"  \" + line;\n                  }\n\n                  return line;\n                })\n                .filter(Boolean)\n                .join(\"\\n\");\n\n            for (const line of prettyErr.split(\"\\n\")) {\n              console.log(...formatConsoleDate(new Date(), level).concat(line));\n            }\n\n            return;\n          }\n      }\n    }\n\n    console.log(...formatConsoleDate(new Date(), level).concat(args));\n  };\n};\n\nfunction colorize(s: string, ...cc: Color[]): string[] {\n  if (isBrowser) {\n    const attr = [];\n    for (const c of cc) {\n      attr.push(colorHex[c]);\n    }\n\n    return [`%c${s}`, attr.join(\"; \")];\n  }\n\n  let out = \"\";\n  for (const c of cc) {\n    out += `\\x1b[${c}m`;\n  }\n  out += `${s}\\x1b[0m`;\n\n  return [out];\n}\n\nexport const trace = createLogger(0, colorize(\"TRC\", Color.Magenta));\nexport const debug = createLogger(1, colorize(\"DBG\", Color.Yellow));\nexport const log = createLogger(2, colorize(\"LOG\", Color.Yellow));\nexport const info = createLogger(2, colorize(\"INF\", Color.Green));\nexport const warn = createLogger(3, colorize(\"WRN\", Color.Cyan));\nexport const error = createLogger(4, colorize(\"ERR\", Color.Red, Color.Bold));\n\n// export {\n//   trace,\n//   debug,\n//   log,\n//   info,\n//   warn,\n//   error,\n// };\n\n// export function warn(...args: string[]) {}\n","import { SubAttributesPayload } from \"@empirica/tajriba\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { JsonValue } from \"../utils/json\";\n\nexport class Globals {\n  protected attrs = new Map<string, BehaviorSubject<JsonValue | undefined>>();\n  private updates = new Map<string, JsonValue | undefined>();\n  public self: BehaviorSubject<Globals>;\n\n  constructor(globals: Observable<SubAttributesPayload>) {\n    this.self = new BehaviorSubject<Globals>(this);\n\n    globals.subscribe({\n      next: ({ attribute, done }) => {\n        if (attribute) {\n          let val = undefined;\n          if (attribute.val) {\n            val = JSON.parse(attribute.val);\n          }\n\n          this.updates.set(attribute.key, val);\n        }\n\n        if (done) {\n          for (const [key, val] of this.updates) {\n            this.obs(key).next(val);\n          }\n\n          this.updates.clear();\n\n          if (this.self) {\n            this.self.next(this);\n          }\n        }\n      },\n    });\n  }\n\n  get(key: string): JsonValue | undefined {\n    const o = this.attrs.get(key);\n    if (o) {\n      return o.getValue();\n    }\n\n    return undefined;\n  }\n\n  obs(key: string) {\n    let o = this.attrs.get(key);\n    if (!o) {\n      o = new BehaviorSubject<JsonValue | undefined>(undefined);\n      this.attrs.set(key, o);\n    }\n\n    return o;\n  }\n}\n","import { ParticipantIdent, Tajriba } from \"@empirica/tajriba\";\nimport { bs } from \"../utils/object\";\n\nexport const ErrNotConnected = new Error(\"not connected\");\n\nexport class TajribaConnection {\n  readonly tajriba: Tajriba;\n  private _connected = bs(false);\n  private _connecting = bs(true);\n  private _stopped = bs(false);\n\n  constructor(private url: string) {\n    this.tajriba = Tajriba.connect(this.url);\n    this._connected.next(this.tajriba.connected);\n\n    this.tajriba.on(\"connected\", () => {\n      this._connected.next(true);\n      this._connecting.next(false);\n    });\n\n    this.tajriba.on(\"disconnected\", () => {\n      this._connected.next(false);\n      this._connecting.next(true);\n    });\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get stopped() {\n    return this._stopped;\n  }\n\n  async sessionParticipant(token: string, pident: ParticipantIdent) {\n    if (!this._connected.getValue()) {\n      throw ErrNotConnected;\n    }\n\n    return await this.tajriba.sessionParticipant(token, pident);\n  }\n\n  async sessionAdmin(token: string) {\n    if (!this._connected.getValue()) {\n      throw ErrNotConnected;\n    }\n\n    return await this.tajriba.sessionAdmin(token);\n  }\n\n  stop() {\n    if (this._stopped.getValue()) {\n      return;\n    }\n\n    if (this.tajriba) {\n      this.tajriba.removeAllListeners(\"connected\");\n      this.tajriba.removeAllListeners(\"disconnected\");\n      this.tajriba.stop();\n    }\n\n    this._connecting.next(false);\n    this._connected.next(false);\n    this._stopped.next(true);\n  }\n}\n","/* c8 ignore start */\n\nimport { BehaviorSubject } from \"rxjs\";\n\nexport function bs<T>(init: T) {\n  return new BehaviorSubject<T>(init);\n}\n\nexport function bsu<T>(init: T | undefined = undefined) {\n  return new BehaviorSubject<T | undefined>(init);\n}\n\nexport function deepEqual(obj1: any, obj2: any) {\n  if (obj1 === obj2)\n    // it's just the same object. No need to compare.\n    return true;\n\n  if (isPrimitive(obj1) && isPrimitive(obj2))\n    // compare primitives\n    return obj1 === obj2;\n\n  if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;\n\n  // compare objects with same number of keys\n  for (let key in obj1) {\n    if (!(key in obj2)) return false; //other object doesn't have this prop\n    if (!deepEqual(obj1[key], obj2[key])) return false;\n  }\n\n  return true;\n}\n\n//check if value is primitive\nfunction isPrimitive(obj: any) {\n  return obj !== Object(obj);\n}\n","import { ParticipantIdent, TajribaParticipant } from \"@empirica/tajriba\";\nimport { BehaviorSubject, merge, Observable, SubscriptionLike } from \"rxjs\";\nimport { subscribeAsync } from \"../admin/observables\";\nimport {\n  ErrNotConnected,\n  TajribaConnection,\n} from \"../shared/tajriba_connection\";\nimport { error } from \"../utils/console\";\nimport { bs, bsu } from \"../utils/object\";\n\nexport class ParticipantConnection {\n  private _tajribaPart = bsu<TajribaParticipant>();\n  private _connected = bs(false);\n  private _connecting = bs(false);\n  private _stopped = bs(false);\n  private _sessionsSub: SubscriptionLike;\n\n  constructor(\n    taj: TajribaConnection,\n    sessions: BehaviorSubject<Session | undefined>,\n    private resetSession: () => void\n  ) {\n    let session: Session | undefined;\n    let connected = false;\n    this._sessionsSub = subscribeAsync(\n      merge(taj.connected, sessions),\n      async (sessionOrConnected) => {\n        if (typeof sessionOrConnected === \"boolean\") {\n          connected = sessionOrConnected;\n        } else {\n          session = sessionOrConnected;\n        }\n\n        if (!session || !connected) {\n          return;\n        }\n\n        if (this._connected.getValue() || this._connecting.getValue()) {\n          return;\n        }\n\n        this._connecting.next(true);\n\n        try {\n          const tajPart = await taj.sessionParticipant(\n            session.token,\n            session.participant\n          );\n\n          this._tajribaPart.next(tajPart);\n          if (tajPart.connected) {\n            this._connected.next(true);\n            this._connecting.next(false);\n          }\n\n          tajPart.on(\"connected\", () => {\n            if (!this._connected.getValue()) {\n              this._connected.next(true);\n              this._connecting.next(false);\n            }\n          });\n          tajPart.on(\"disconnected\", () => {\n            if (this._connected.getValue()) {\n              this._connected.next(false);\n              this._connecting.next(false);\n            }\n          });\n          tajPart.on(\"error\", (err) => {\n            this._connecting.next(false);\n            error(\"conn error\", err);\n          });\n          tajPart.on(\"accessDenied\", () => {\n            if (this._connected.getValue()) {\n              this._connected.next(false);\n              this._connecting.next(false);\n            }\n            console.log(\n              \"accessDenied\",\n              session?.participant.id,\n              session?.token\n            );\n            this.resetSession();\n          });\n        } catch (err) {\n          if (err !== ErrNotConnected) {\n            error(\"new conn error\", err);\n            this.resetSession();\n          }\n        }\n      }\n    );\n  }\n\n  stop() {\n    if (this._stopped.getValue()) {\n      return;\n    }\n\n    const taj = this._tajribaPart.getValue();\n    if (taj) {\n      taj.removeAllListeners(\"connected\");\n      taj.removeAllListeners(\"disconnected\");\n      taj.stop();\n      this._tajribaPart.next(undefined);\n    }\n\n    this._sessionsSub.unsubscribe();\n\n    this._connecting.next(false);\n    this._connected.next(false);\n    this._stopped.next(true);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get stopped() {\n    return this._stopped;\n  }\n\n  get participant() {\n    return this._tajribaPart;\n  }\n}\n\nexport interface Session {\n  token: string;\n  participant: ParticipantIdent;\n}\n\ninterface Storage {\n  clear(): void;\n  getItem(key: string): string | null;\n  removeItem(key: string): void;\n  setItem(key: string, value: string): void;\n}\n\nexport class MemStorage {\n  static vals: { [key: string]: any } = {};\n  static clear(): void {\n    this.vals = {};\n  }\n  static getItem(key: string): string | null {\n    return this.vals[key];\n  }\n  static removeItem(key: string): void {\n    delete this.vals[key];\n  }\n  static setItem(key: string, value: string): void {\n    this.vals[key] = value;\n  }\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nlet storage: Storage;\nif (isBrowser) {\n  storage = window.localStorage;\n}\n\nexport class ParticipantSession {\n  static tokenKey = \"empirica:token\";\n  static partKey = \"empirica:participant\";\n  static storage: Storage = storage;\n\n  private _sessions: BehaviorSubject<Session | undefined>;\n  private _token?: string;\n  protected _participant?: ParticipantIdent;\n\n  constructor(private ns: string, resetSession: Observable<void>) {\n    this._token = this.strg.getItem(this.tokenKey) || undefined;\n\n    const participantStr = this.strg.getItem(this.partKey) || undefined;\n\n    if (participantStr) {\n      this._participant = JSON.parse(participantStr);\n    }\n\n    const sess = this.calcSession();\n    this._sessions = bsu<Session>(sess);\n\n    resetSession.subscribe({\n      next: () => {\n        this.clearSession();\n      },\n    });\n  }\n\n  get sessions() {\n    return this._sessions;\n  }\n\n  get session() {\n    return this._sessions.getValue();\n  }\n\n  get token() {\n    return this._token;\n  }\n\n  get participant() {\n    return this._participant;\n  }\n\n  get tokenKey() {\n    return `${ParticipantSession.tokenKey}:${this.ns}`;\n  }\n\n  get partKey() {\n    return `${ParticipantSession.partKey}:${this.ns}`;\n  }\n\n  updateSession(token: string, participant: ParticipantIdent) {\n    this.strg.setItem(this.tokenKey, token);\n    this.strg.setItem(this.partKey, JSON.stringify(participant));\n    this._token = token;\n    this._participant = participant;\n    this._sessions.next(this.calcSession());\n  }\n\n  clearSession() {\n    delete this._token;\n    delete this._participant;\n    this.strg.removeItem(this.tokenKey);\n    this.strg.removeItem(this.partKey);\n    this._sessions.next(undefined);\n  }\n\n  private calcSession(): Session | undefined {\n    if (this._token && this._participant) {\n      return {\n        token: this._token,\n        participant: this._participant,\n      };\n    }\n\n    return undefined;\n  }\n\n  private get strg() {\n    return ParticipantSession.storage;\n  }\n}\n","import {\n  ChangePayload,\n  ParticipantChange,\n  SetAttributeInput,\n  SubAttributesPayload,\n} from \"@empirica/tajriba\";\nimport { groupBy, Observable, Subject } from \"rxjs\";\nimport { AttributeChange, AttributeUpdate } from \"../shared/attributes\";\nimport { ScopeIdent, ScopeUpdate } from \"../shared/scopes\";\nimport { StepChange, StepUpdate } from \"./steps\";\n\nexport interface ParticipantUpdate {\n  participant: ParticipantChange;\n  removed: boolean;\n}\n\nexport class TajribaProvider {\n  public scopes = new Subject<ScopeUpdate>();\n  public attributes = new Subject<AttributeUpdate>();\n  public participants = new Subject<ParticipantUpdate>();\n  public steps = new Subject<StepUpdate>();\n  public dones = new Subject<void>();\n\n  constructor(\n    changes: Observable<ChangePayload>,\n    readonly globals: Observable<SubAttributesPayload>,\n    readonly setAttributes: (input: SetAttributeInput[]) => Promise<any>\n  ) {\n    changes.pipe(groupBy((chg) => chg.change.__typename)).subscribe({\n      next: (group) => {\n        switch (group.key) {\n          case \"ScopeChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.scopes.next({\n                  scope: <ScopeIdent>scope.change,\n                  removed: scope.removed,\n                });\n\n                // console.log(\n                //   \"ScopeChange\",\n                //   (<ScopeIdent>scope.change).kind,\n                //   scope.done\n                // );\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"AttributeChange\":\n            group.subscribe({\n              next: (attribute) => {\n                this.attributes.next({\n                  attribute: <AttributeChange>attribute.change,\n                  removed: attribute.removed,\n                });\n\n                // console.log(\n                //   \"AttributeChange\",\n                //   (<AttributeChange>attribute.change).key,\n                //   attribute.done\n                // );\n\n                if (attribute.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"ParticipantChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.participants.next({\n                  participant: <ParticipantChange>scope.change,\n                  removed: scope.removed,\n                });\n\n                // console.log(\n                //   \"ParticipantChange\",\n                //   <ParticipantChange>scope.change,\n                //   scope.done\n                // );\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n          case \"StepChange\":\n            group.subscribe({\n              next: (scope) => {\n                this.steps.next({\n                  step: <StepChange>scope.change,\n                  removed: scope.removed,\n                });\n\n                if (scope.done) {\n                  this.dones.next();\n                }\n              },\n            });\n\n            break;\n        }\n      },\n    });\n  }\n}\n","import React from \"react\";\n\nexport function Loading() {\n  // <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\n  return (\n    <div className=\"h-full w-full flex items-center justify-center\">\n      <svg\n        width=\"44\"\n        height=\"44\"\n        viewBox=\"0 0 44 44\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"text-empirica-200 stroke-current\"\n      >\n        <g fill=\"none\" fillRule=\"evenodd\" strokeWidth=\"2\">\n          <circle cx=\"22\" cy=\"22\" r=\"1\">\n            <animate\n              attributeName=\"r\"\n              begin=\"0s\"\n              dur=\"1.8s\"\n              values=\"1; 20\"\n              calcMode=\"spline\"\n              keyTimes=\"0; 1\"\n              keySplines=\"0.165, 0.84, 0.44, 1\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"0s\"\n              dur=\"1.8s\"\n              values=\"1; 0\"\n              calcMode=\"spline\"\n              keyTimes=\"0; 1\"\n              keySplines=\"0.3, 0.61, 0.355, 1\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n          <circle cx=\"22\" cy=\"22\" r=\"1\">\n            <animate\n              attributeName=\"r\"\n              begin=\"-0.9s\"\n              dur=\"1.8s\"\n              values=\"1; 20\"\n              calcMode=\"spline\"\n              keyTimes=\"0; 1\"\n              keySplines=\"0.165, 0.84, 0.44, 1\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"stroke-opacity\"\n              begin=\"-0.9s\"\n              dur=\"1.8s\"\n              values=\"1; 0\"\n              calcMode=\"spline\"\n              keyTimes=\"0; 1\"\n              keySplines=\"0.3, 0.61, 0.355, 1\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </g>\n      </svg>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { isDevelopment } from \"../utils\";\n\nexport function NoGames() {\n  return (\n    <div className=\"h-screen flex items-center justify-center\">\n      <div className=\"w-92 flex flex-col items-center\">\n        <h2 className=\"text-gray-700 font-medium\">No experiments available</h2>\n        <p className=\"mt-2 text-gray-400 text-justify\">\n          There are currently no available experiments. Please wait until an\n          experiment becomes available or come back at a later date.\n        </p>\n        {isDevelopment ? (\n          <p className=\"mt-4 text-gray-700\">\n            Go to{\" \"}\n            <a\n              href=\"/admin\"\n              target=\"empirica-admin\"\n              className=\"text-empirica-500\"\n            >\n              Admin\n            </a>{\" \"}\n            to get started\n          </p>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n","export const isDevelopment = process.env.NODE_ENV === \"development\";\nexport const isProduction = process.env.NODE_ENV === \"production\";\nexport const isTest = process.env.NODE_ENV === \"test\";\n\nexport const createNewParticipant = (key = \"participantKey\") => {\n  const url = new URL(document.location.href);\n  url.searchParams.set(key, new Date().getTime().toString());\n  window.open(url.href, \"_blank\")?.focus();\n};\n","import React, { FormEvent, useState } from \"react\";\n\nexport interface PlayerCreateProps {\n  onPlayerID: (playerID: string) => void;\n  connecting: boolean;\n}\n\nexport function PlayerCreate({ onPlayerID, connecting }: PlayerCreateProps) {\n  const [playerID, setPlayerID] = useState(\"\");\n\n  const handleSubmit = (evt: FormEvent) => {\n    evt.preventDefault();\n    if (!playerID || playerID.trim() === \"\") {\n      return;\n    }\n\n    onPlayerID(playerID);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-empirica-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n          Enter your Player Identifier\n        </h2>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n          <form\n            className=\"space-y-6\"\n            action=\"#\"\n            method=\"POST\"\n            onSubmit={handleSubmit}\n          >\n            <fieldset disabled={connecting}>\n              <div>\n                <label\n                  htmlFor=\"email\"\n                  className=\"block text-sm font-medium text-gray-700\"\n                >\n                  Identifier\n                </label>\n                <div className=\"mt-1\">\n                  <input\n                    id=\"playerID\"\n                    name=\"playerID\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    required\n                    autoFocus\n                    className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm\"\n                    value={playerID}\n                    onChange={(e) => setPlayerID(e.target.value)}\n                  />\n                  <p\n                    className=\"mt-2 text-sm text-gray-500\"\n                    id=\"playerID-description\"\n                  >\n                    This should be given to you. E.g. email, code...\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <button\n                  type=\"submit\"\n                  className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-empirica-600 hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500\"\n                >\n                  Enter\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { BehaviorSubject, Observable, Subscription } from \"rxjs\";\nimport { ParticipantModeContext } from \"../../context\";\nimport { useParticipantContext } from \"../../react/hooks\";\nimport type { StepTick } from \"../../steps\";\nimport { EmpiricaClassicContext, Game, Player, Round, Stage } from \"../classic\";\n\nexport function usePlayer() {\n  return usePartModeCtxKey<EmpiricaClassicContext, \"player\", Player>(\"player\");\n}\n\nexport function useGame() {\n  return usePartModeCtxKey<EmpiricaClassicContext, \"game\", Game>(\"game\");\n}\n\nexport function useRound() {\n  return usePartModeCtxKey<EmpiricaClassicContext, \"round\", Round>(\"round\");\n}\n\nexport function useStage() {\n  return usePartModeCtxKey<EmpiricaClassicContext, \"stage\", Stage>(\"stage\");\n}\n\nexport function useStageTimer() {\n  const stage = useStage();\n\n  const [val, setVal] = useState<{ tick: StepTick | undefined }>({\n    tick: stage?.timer?.current,\n  });\n\n  const timerSubscription = useRef<Subscription | null>(null);\n\n\n  useEffect(() => {\n    \n    if (!stage || !stage.timer) {\n      return;\n    }\n\n    if (timerSubscription.current === null) {\n      timerSubscription.current = stage.timer.obs().subscribe({\n          next(val) {\n            setVal({ tick: val });\n          },\n        });\n    }\n\n\n    return () => {\n      timerSubscription?.current?.unsubscribe.bind(timerSubscription.current);\n      timerSubscription.current = null;\n    }\n  }, [stage?.timer]);\n\n  return val.tick;\n}\n\nexport function usePlayers() {\n  return usePartModeCtxKey<EmpiricaClassicContext, \"players\", Player[]>(\n    \"players\"\n  );\n}\n\nexport function usePartModeCtx<M>() {\n  const ctx = useParticipantContext() as ParticipantModeContext<M>;\n  const [mode, setMode] = useState<{ data: M | undefined }>({\n    data: ctx?.mode?.getValue(),\n  });\n\n  useEffect(() => {\n    if (!ctx || !ctx.mode) {\n      return;\n    }\n\n    const sub = ctx.mode.subscribe({\n      next(m) {\n        setMode({ data: m });\n      },\n    });\n\n    return sub.unsubscribe.bind(sub);\n  }, [ctx]);\n\n  return mode.data;\n}\n\nexport function usePartModeCtxKey<M, K extends keyof M, R>(\n  name: K\n): R | undefined {\n  const mode = usePartModeCtx<M>();\n  const iniVal =\n    mode &&\n    ((<unknown>mode[name]) as BehaviorSubject<R | undefined> | undefined);\n  const [val, setVal] = useState<{ data: R | undefined }>({\n    data: iniVal?.getValue(),\n  });\n\n  useEffect(() => {\n    if (!mode) {\n      return;\n    }\n\n    const obs = (<unknown>mode[name]) as Observable<R>;\n\n    const sub = obs.subscribe({\n      next(val) {\n        setVal({ data: val });\n      },\n    });\n\n    return sub.unsubscribe.bind(sub);\n  }, [mode]);\n\n  return val.data;\n}\n","import React from \"react\";\nimport { warn } from \"../../../utils/console\";\nimport { Loading } from \"../../react/Loading\";\nimport { usePlayer } from \"./hooks\";\n\nexport function Lobby() {\n  const player = usePlayer();\n\n  if (!player) {\n    return <Loading />;\n  }\n\n  const treatment = player.get(\"treatment\") as { playerCount: number };\n\n  if (!treatment || !treatment.playerCount) {\n    warn(\"lobby: no treatment found on player\");\n\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"flex h-full items-center justify-center\">\n      <div className=\"text-center\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 640 512\"\n          className=\"mx-auto h-12 w-12 text-gray-400\"\n          stroke=\"none\"\n          fill=\"currentColor\"\n          aria-hidden=\"true\"\n        >\n          <path d=\"M544 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zM320 256c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm0-192c44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80 35.9-80 80-80zm244 192h-40c-15.2 0-29.3 4.8-41.1 12.9 9.4 6.4 17.9 13.9 25.4 22.4 4.9-2.1 10.2-3.3 15.7-3.3h40c24.2 0 44 21.5 44 48 0 8.8 7.2 16 16 16s16-7.2 16-16c0-44.1-34.1-80-76-80zM96 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm304.1 180c-33.4 0-41.7 12-80.1 12-38.4 0-46.7-12-80.1-12-36.3 0-71.6 16.2-92.3 46.9-12.4 18.4-19.6 40.5-19.6 64.3V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-44.8c0-23.8-7.2-45.9-19.6-64.3-20.7-30.7-56-46.9-92.3-46.9zM480 432c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16v-44.8c0-16.6 4.9-32.7 14.1-46.4 13.8-20.5 38.4-32.8 65.7-32.8 27.4 0 37.2 12 80.2 12s52.8-12 80.1-12c27.3 0 51.9 12.3 65.7 32.8 9.2 13.7 14.1 29.8 14.1 46.4V432zM157.1 268.9c-11.9-8.1-26-12.9-41.1-12.9H76c-41.9 0-76 35.9-76 80 0 8.8 7.2 16 16 16s16-7.2 16-16c0-26.5 19.8-48 44-48h40c5.5 0 10.8 1.2 15.7 3.3 7.5-8.5 16.1-16 25.4-22.4z\" />\n        </svg>\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n          {treatment.playerCount > 1\n            ? \"Waiting for other players\"\n            : \"Game loading\"}\n        </h3>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          Please wait for the game to be ready.\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { WithChildren } from \"../../react/helpers\";\nimport { Attributable } from \"../../../shared/scopes\";\nimport { Game, Player } from \"../classic\";\nimport { useGame, usePlayer } from \"./hooks\";\nimport { error } from \"../../../utils/console\";\n\nexport type StepsFunc = (props: {\n  game?: Game;\n  player?: Player;\n}) => React.ElementType[] | undefined;\n\nexport type StepsProps = WithChildren<{\n  steps: React.ElementType[] | StepsFunc;\n  progressKey: string;\n  doneKey: string;\n  object?: Attributable;\n}>;\n\nexport function Steps({\n  steps,\n  progressKey,\n  doneKey,\n  object,\n  children,\n}: StepsProps) {\n  let obj: Attributable;\n  const game = useGame();\n  const player = usePlayer();\n\n  // Find state receiver\n  if (object) {\n    obj = object;\n  } else if (player) {\n    obj = player;\n  } else {\n    error(\"no receiver and no player in Steps\");\n    return <div>Missing attribute</div>;\n  }\n\n  // Are we already done\n  if (obj.get(doneKey)) {\n    return <>{children}</>;\n  }\n\n  // Static steps\n  let actualSteps = steps as React.ElementType[];\n\n  // Dynamic steps\n  if (typeof steps === \"function\") {\n    actualSteps = steps({ game, player })!;\n    if (!actualSteps) {\n      obj.set(doneKey, true);\n\n      return <>{children}</>;\n    }\n  }\n\n  const index = (obj.get(progressKey) as number) || 0;\n  if (actualSteps.length === 0 || index >= actualSteps.length) {\n    obj.set(doneKey, true);\n\n    return <>{children}</>;\n  }\n\n  const Step = actualSteps[index];\n\n  if (!Step) {\n    error(\"missing step at index\");\n\n    return <div>Step missing</div>;\n  }\n\n  const next = () => {\n    if (index + 1 >= actualSteps.length) {\n      obj.set(doneKey, true);\n    } else {\n      obj.set(progressKey, index + 1);\n    }\n  };\n\n  const previous = () => {\n    if (index > 0) {\n      obj.set(progressKey, index - 1);\n    }\n  };\n\n  return <Step index={index} previous={previous} next={next}></Step>;\n}\n","import React, { useEffect } from \"react\";\nimport { usePlayer, useRound } from \"../hooks\";\n\nconst buttonStyle = {\n  width: 40,\n  height: 40,\n  backgroundColor: \"#888\",\n  color: \"black\",\n  verticalAlign: \"top\",\n  fontSize: \"32px\",\n  borderLeft: \"5px solid rgb(220,220,220)\",\n  borderTop: \"5px solid rgb(220,220,220)\",\n  borderBottom: \"5px solid #333\",\n  borderRight: \"5px solid #333\",\n  display: \"inline-block\",\n};\n\nconst visitStyle = {\n  width: 40,\n  height: 40,\n  itemsAlign: \"center\",\n  backgroundColor: \"#555\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  border: \"1px solid black\",\n  verticalAlign: \"top\",\n  fontSize: \"24px\",\n  display: \"inline-block\",\n};\n\ntype cell = number | string;\ntype row = [cell, cell, cell, cell, cell, cell, cell, cell, cell, cell];\ntype grid = [row, row, row, row, row, row, row, row, row, row];\n\nexport function Sweeper() {\n  const round = useRound();\n  if (!round) {\n    return null;\n  }\n  const player = usePlayer();\n  if (!player) {\n    return null;\n  }\n\n  const visited = round.get(\"visited\") as Array<Array<number>>;\n  const bombs = round.get(\"bombs\") as Array<Array<number | \"X\">>;\n  const lost = round.get(\"lost\") as boolean;\n\n  useEffect(function () {\n    generateBombs();\n  }, []);\n\n  function generateBombs() {\n    if (bombs || !round) {\n      return;\n    }\n\n    let bombArr = new Array(10)\n      .fill(0)\n      .map(() => new Array(10).fill(0)) as grid;\n\n    for (let i = 0; i < bombArr.length; i++) {\n      let bombPos = Math.floor(Math.random() * 10);\n      bombArr[i]![bombPos] = \"X\";\n    }\n\n    for (let i = 0; i < bombArr.length; i++) {\n      for (let j = 0; j < bombArr[i]!.length; j++) {\n        if (bombArr[i]![j] !== \"X\") {\n          let sum = 0;\n\n          if (i > 0 && bombArr[i - 1]![j] == \"X\") sum++;\n          if (i < bombArr.length - 1 && bombArr[i + 1]![j] == \"X\") sum++;\n          if (j < bombArr.length - 1 && bombArr[i]![j + 1] == \"X\") sum++;\n          if (j > 0 && bombArr[i]![j - 1] == \"X\") sum++;\n          if (i < bombArr.length - 1 && j > 0 && bombArr[i + 1]![j - 1] == \"X\")\n            sum++;\n          if (\n            i < bombArr.length - 1 &&\n            j < bombArr.length - 1 &&\n            bombArr[i + 1]![j + 1] == \"X\"\n          )\n            sum++;\n          if (i > 0 && j > 0 && bombArr[i - 1]![j - 1] == \"X\") sum++;\n          if (i > 0 && j < bombArr.length - 1 && bombArr[i - 1]![j + 1] == \"X\")\n            sum++;\n\n          bombArr[i]![j] = sum;\n        }\n      }\n    }\n\n    round.set(\"bombs\", bombArr);\n\n    let cover = Array(10)\n      .fill(0)\n      .map(() => Array(10).fill(0));\n\n    round.set(\"visited\", cover);\n  }\n\n  const visitCell = (i: number, j: number) => {\n    if (lost || !bombs || !visited) {\n      return;\n    }\n\n    if (bombs[i]![j] === \"X\") {\n      round.set(\"lost\", true);\n    }\n\n    dfsCells(i, j);\n    visited[i]![j] = 1;\n    round.set(\"visited\", [...visited]);\n  };\n\n  function dfsCells(i: number, j: number) {\n    if (!round || !bombs || !visited) {\n      return;\n    }\n\n    if (\n      i < 0 ||\n      i > visited.length - 1 ||\n      j < 0 ||\n      j > visited[0]!.length - 1 ||\n      visited[i]![j] == 1 ||\n      bombs[i]![j] == \"X\"\n    )\n      return;\n\n    visited[i]![j] = 1;\n\n    round.set(\"visited\", [...visited]);\n    if (bombs[i]![j]! < 1) {\n      dfsCells(i + 1, j);\n      dfsCells(i - 1, j);\n      dfsCells(i, j + 1);\n      dfsCells(i, j - 1);\n    }\n  }\n\n  if (!bombs) {\n    return null;\n  }\n\n  return (\n    <div className=\"text-sm relative\">\n      {lost ? (\n        <>\n          <div className=\"absolute h-full w-full flex items-center justify-center text-6xl white font-black bg-opacity-50 bg-gray-300\">\n            YOU LOST\n          </div>\n          <div className=\"absolute h-full w-full flex items-center justify-center text-6xl white font-black mt-1 ml-1 text-white\">\n            YOU LOST\n          </div>\n        </>\n      ) : (\n        \"\"\n      )}\n\n      {bombs.map((arr, index) => (\n        <div key={index}>\n          {arr.map((_, i) => (\n            <div\n              key={i}\n              onClick={() => visitCell(index, i)}\n              style={visited[index]![i] == 0 ? buttonStyle : visitStyle}\n            >\n              <div className=\"h-full w-full flex items-center justify-center\">\n                {visited[index]![i] == 0\n                  ? null\n                  : bombs[index]![i] == 0\n                  ? \"\"\n                  : bombs[index]![i]}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { FormEvent, useState } from \"react\";\n\nexport function Quiz({ next }: { next: () => void }) {\n  const labelClassName = \"block text-sm font-medium text-gray-700 mb-2\";\n  const inputClassName =\n    \"appearance-none block px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm\";\n\n  const [sum, setSum] = useState(\"\");\n  const [horse, setHorse] = useState(\"\");\n\n  function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n\n    if (sum !== \"4\" || horse !== \"white\") {\n      alert(\"Incorrect! Read the instructions and please try again.\");\n    } else {\n      next();\n    }\n  }\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"mt-6 sm:mt-24\">\n        <h3 className=\"text-2xl font-semi-bold text-gray-900\">Quiz</h3>\n        <form className=\"mt-4\" onSubmit={handleSubmit}>\n          <p className=\"mb-5\">\n            <label className={labelClassName}>What is 2+2?</label>\n            <input\n              className={inputClassName}\n              type=\"text\"\n              dir=\"auto\"\n              id=\"sum\"\n              name=\"sum\"\n              placeholder=\"e.g. 3\"\n              value={sum}\n              onChange={(e) => setSum(e.target.value)}\n              autoComplete=\"off\"\n              autoFocus\n              required\n            />\n          </p>\n          <p className=\"mb-5\">\n            <label className={labelClassName}>\n              What color was Napoleon's white horse?\n            </label>\n            <input\n              className={inputClassName}\n              type=\"text\"\n              dir=\"auto\"\n              id=\"horse\"\n              name=\"horse\"\n              placeholder=\"brown\"\n              value={horse}\n              onChange={(e) => setHorse(e.target.value)}\n              autoComplete=\"off\"\n              required\n            />\n          </p>\n\n          <button\n            type=\"submit\"\n            className=\"inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500\"\n          >\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { ChangeEventHandler, RefObject, useRef } from \"react\";\n\nexport interface SliderProps {\n  value: number;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  min?: number;\n  max?: number;\n  stepSize?: number;\n  disabled?: boolean;\n}\n\nexport function Slider({\n  value,\n  onChange,\n  min = 0,\n  max = 100,\n  stepSize = 1,\n  disabled = false,\n}: SliderProps) {\n  const noVal = value === null || value === undefined;\n  const val = noVal ? (max - min) / 2 : value;\n  const cls = noVal ? \"slider-thumb-zero\" : \"slider-thumb\";\n  const ref: RefObject<HTMLOutputElement> = useRef(null);\n\n  if (value !== null && ref.current) {\n    const nmin = min ? min : 0;\n    const nmax = max ? max : 100;\n    const newVal = Number(((value - nmin) * 100) / (nmax - nmin));\n\n    ref.current.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\n  }\n\n  return (\n    <div className=\"relative w-full\">\n      <input\n        className={cls}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={stepSize}\n        value={val}\n        onChange={onChange}\n        disabled={disabled}\n      />\n      {noVal ? (\n        \"\"\n      ) : (\n        <output\n          ref={ref}\n          className=\"font-mono absolute w-12 h-7 flex items-center justify-center left-1/2 bottom-7 rounded transform -translate-x-1/2 bg-gray-200\"\n        >\n          {value}\n        </output>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","names":["import_react","React","import_react","React","import_react","import_rxjs","import_react","import_rxjs","error","import_rxjs","import_rxjs","import_rxjs","isBrowser","import_rxjs","React","import_react","React","import_react","React","import_react","React","import_react","val","_a","import_react","React","import_react","React","React","Lobby","Finished","import_react","React","import_react","React","import_react","React"]}