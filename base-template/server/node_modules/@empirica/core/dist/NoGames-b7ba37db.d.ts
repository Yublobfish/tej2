import { W as WithChildren } from './helpers-8ea4d2b4.js';
import { G as Globals } from './globals-1dc2e2b1.js';
import { T as TajribaConnection } from './tajriba_connection-7db9ed97.js';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { TajribaParticipant, ParticipantIdent } from '@empirica/tajriba';
import { T as TajribaProvider } from './provider-3e575146.js';

declare function EmpiricaMenu(): JSX.Element | null;

declare class ParticipantConnection {
    private resetSession;
    private _tajribaPart;
    private _connected;
    private _connecting;
    private _stopped;
    private _sessionsSub;
    constructor(taj: TajribaConnection, sessions: BehaviorSubject<Session | undefined>, resetSession: () => void);
    stop(): void;
    get connecting(): BehaviorSubject<boolean>;
    get connected(): BehaviorSubject<boolean>;
    get stopped(): BehaviorSubject<boolean>;
    get participant(): BehaviorSubject<TajribaParticipant | undefined>;
}
interface Session {
    token: string;
    participant: ParticipantIdent;
}
interface Storage {
    clear(): void;
    getItem(key: string): string | null;
    removeItem(key: string): void;
    setItem(key: string, value: string): void;
}
declare class ParticipantSession {
    private ns;
    static tokenKey: string;
    static partKey: string;
    static storage: Storage;
    private _sessions;
    private _token?;
    protected _participant?: ParticipantIdent;
    constructor(ns: string, resetSession: Observable<void>);
    get sessions(): BehaviorSubject<Session | undefined>;
    get session(): Session | undefined;
    get token(): string | undefined;
    get participant(): ParticipantIdent | undefined;
    get tokenKey(): string;
    get partKey(): string;
    updateSession(token: string, participant: ParticipantIdent): void;
    clearSession(): void;
    private calcSession;
    private get strg();
}

declare class ParticipantContext {
    readonly tajriba: TajribaConnection;
    readonly participant: ParticipantConnection;
    readonly session: ParticipantSession;
    readonly resetSession: Subject<void>;
    readonly provider: BehaviorSubject<TajribaProvider | undefined>;
    readonly globals: BehaviorSubject<Globals | undefined>;
    constructor(url: string, ns: string);
    get connecting(): BehaviorSubject<boolean>;
    get connected(): BehaviorSubject<boolean>;
    register(playerIdentifier: string): Promise<void>;
    stop(): void;
}
declare type Mode<T> = (participantID: string, provider: TajribaProvider) => T;

declare type EmpiricaParticipantProps = WithChildren<{
    url: string;
    ns: string;
    modeFunc?: Mode<any>;
}>;
declare function EmpiricaParticipant({ url, ns, modeFunc, children, }: EmpiricaParticipantProps): JSX.Element;

declare function Finished(): JSX.Element;

declare function useParticipantContext(): ParticipantContext | undefined;
declare function useTajribaConnecting(): boolean | undefined;
declare function useTajribaConnected(): boolean | undefined;
declare function useTajriba(): TajribaConnection | undefined;
declare function useGlobal(): Globals | undefined;
declare function useConsent(ns?: string): [boolean, (() => void) | undefined];
declare function usePlayerID(): [
    boolean,
    string | undefined,
    ((v: string) => void) | undefined
];

declare function Loading(): JSX.Element;

declare function Logo(): JSX.Element;

declare function NoGames(): JSX.Element;

export { EmpiricaMenu as E, Finished as F, Loading as L, NoGames as N, EmpiricaParticipant as a, EmpiricaParticipantProps as b, useGlobal as c, useParticipantContext as d, usePlayerID as e, useTajriba as f, useTajribaConnected as g, useTajribaConnecting as h, Logo as i, useConsent as u };
