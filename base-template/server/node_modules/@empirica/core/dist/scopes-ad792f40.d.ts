import { b as Steps, S as Step } from './provider-3e575146.js';
import { Observable } from 'rxjs';
import { S as ScopeConstructor, c as Scopes$1, d as ScopeUpdate, A as Attributes, e as ScopeIdent, f as Scope$1 } from './globals-1dc2e2b1.js';

declare class Scopes<Context, Kinds extends {
    [key: string]: ScopeConstructor<Context, Kinds>;
}> extends Scopes$1<Context, Kinds, Scope<Context, Kinds>> {
    private steps;
    constructor(scopesObs: Observable<ScopeUpdate>, donesObs: Observable<void>, ctx: Context, kinds: Kinds, attributes: Attributes, steps: Steps);
    protected create(scopeClass: ScopeConstructor<Context, Kinds>, scope: ScopeIdent): Scope<Context, Kinds>;
}
declare class Scope<Context, Kinds extends {
    [key: string]: ScopeConstructor<Context, Kinds>;
}> extends Scope$1<Context, Kinds> {
    readonly scopes: Scopes<Context, Kinds>;
    private steps;
    constructor(ctx: Context, scope: ScopeIdent, scopes: Scopes<Context, Kinds>, attributes: Attributes, steps: Steps);
    scopeByKey(key: string): Scope<Context, Kinds> | undefined;
    protected ticker(id: string): Step | undefined;
    protected tickerByKey(key: string): Step | undefined;
}

export { Scope as S, Scopes as a };
