import {
  ErrNotConnected,
  TajribaConnection,
  subscribeAsync
} from "./chunk-KMJOEJJN.js";
import {
  bs,
  bsu
} from "./chunk-BNOCSFZ7.js";
import {
  TajribaProvider,
  isDevelopment
} from "./chunk-SZ6OC6CP.js";
import {
  Globals
} from "./chunk-SUJJGAYM.js";
import {
  error,
  warn
} from "./chunk-I6L7V5LM.js";

// src/player/react/Consent.tsx
import React from "react";
var defaultTitle = "Do you consent to participate in this experiment?";
var defaultText = `This experiment is part of a scientific project. Your decision
to participate in this experiment is entirely voluntary. There
are no known or anticipated risks to participating in this
experiment. There is no way for us to identify you. The only
information we will have, in addition to your responses, is
the timestamps of your interactions with our site. The results
of our research may be presented at scientific meetings or
published in scientific journals. Clicking on the "I AGREE"
button indicates that you are at least 18 years of age, and
agree to participate voluntary.`;
var defaultButtonText = "I AGREE";
function Consent({
  title = defaultTitle,
  text = defaultText,
  buttonText = defaultButtonText,
  onConsent
}) {
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      className: "relative h-full z-10 overflow-y-auto",
      "aria-labelledby": "modal-title",
      role: "dialog",
      "aria-modal": "true"
    },
    /* @__PURE__ */ React.createElement("div", { className: "flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0" }, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity",
        "aria-hidden": "true"
      }
    ), /* @__PURE__ */ React.createElement(
      "span",
      {
        className: "hidden sm:inline-block sm:align-middle sm:h-screen",
        "aria-hidden": "true"
      },
      "\u200B"
    ), /* @__PURE__ */ React.createElement("div", { className: "inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100" }, /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-6 w-6 text-green-600",
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        stroke: "currentColor",
        "aria-hidden": "true"
      },
      /* @__PURE__ */ React.createElement(
        "path",
        {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          d: "M5 13l4 4L19 7"
        }
      )
    )), /* @__PURE__ */ React.createElement("div", { className: "mt-3 sm:mt-5" }, /* @__PURE__ */ React.createElement(
      "h3",
      {
        className: "text-lg text-center leading-6 font-medium text-gray-900",
        id: "modal-title"
      },
      title
    ), /* @__PURE__ */ React.createElement("div", { className: "mt-2" }, /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500 text-justify" }, text)))), /* @__PURE__ */ React.createElement("div", { className: "mt-5 sm:mt-6" }, /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "button",
        className: "inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-empirica-600 text-base font-medium text-white hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500 sm:text-sm",
        onClick: onConsent
      },
      buttonText
    ))))
  );
}

// src/player/react/Finished.tsx
import React2 from "react";
function Finished() {
  return /* @__PURE__ */ React2.createElement("div", { className: "h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React2.createElement("h2", { className: "font-medium text-gray-700" }, "Finished"), /* @__PURE__ */ React2.createElement("p", { className: "mt-2 text-gray-400" }, "Thank you for participating"));
}

// src/player/react/EmpiricaParticipant.tsx
import React3 from "react";

// src/player/context.ts
import { BehaviorSubject as BehaviorSubject2, Subject } from "rxjs";

// src/player/connection.ts
import { merge } from "rxjs";
var ParticipantConnection = class {
  constructor(taj, sessions, resetSession) {
    this.resetSession = resetSession;
    this._tajribaPart = bsu();
    this._connected = bs(false);
    this._connecting = bs(false);
    this._stopped = bs(false);
    let session;
    let connected = false;
    this._sessionsSub = subscribeAsync(
      merge(taj.connected, sessions),
      async (sessionOrConnected) => {
        if (typeof sessionOrConnected === "boolean") {
          connected = sessionOrConnected;
        } else {
          session = sessionOrConnected;
        }
        if (!session || !connected) {
          return;
        }
        if (this._connected.getValue() || this._connecting.getValue()) {
          return;
        }
        this._connecting.next(true);
        try {
          const tajPart = await taj.sessionParticipant(
            session.token,
            session.participant
          );
          this._tajribaPart.next(tajPart);
          if (tajPart.connected) {
            this._connected.next(true);
            this._connecting.next(false);
          }
          tajPart.on("connected", () => {
            if (!this._connected.getValue()) {
              this._connected.next(true);
              this._connecting.next(false);
            }
          });
          tajPart.on("disconnected", () => {
            if (this._connected.getValue()) {
              this._connected.next(false);
              this._connecting.next(false);
            }
          });
          tajPart.on("error", (err) => {
            this._connecting.next(false);
            error("conn error", err);
          });
          tajPart.on("accessDenied", () => {
            if (this._connected.getValue()) {
              this._connected.next(false);
              this._connecting.next(false);
            }
            console.log(
              "accessDenied",
              session == null ? void 0 : session.participant.id,
              session == null ? void 0 : session.token
            );
            this.resetSession();
          });
        } catch (err) {
          if (err !== ErrNotConnected) {
            error("new conn error", err);
            this.resetSession();
          }
        }
      }
    );
  }
  stop() {
    if (this._stopped.getValue()) {
      return;
    }
    const taj = this._tajribaPart.getValue();
    if (taj) {
      taj.removeAllListeners("connected");
      taj.removeAllListeners("disconnected");
      taj.stop();
      this._tajribaPart.next(void 0);
    }
    this._sessionsSub.unsubscribe();
    this._connecting.next(false);
    this._connected.next(false);
    this._stopped.next(true);
  }
  get connecting() {
    return this._connecting;
  }
  get connected() {
    return this._connected;
  }
  get stopped() {
    return this._stopped;
  }
  get participant() {
    return this._tajribaPart;
  }
};
var MemStorage = class {
  static clear() {
    this.vals = {};
  }
  static getItem(key) {
    return this.vals[key];
  }
  static removeItem(key) {
    delete this.vals[key];
  }
  static setItem(key, value) {
    this.vals[key] = value;
  }
};
MemStorage.vals = {};
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
var storage;
if (isBrowser) {
  storage = window.localStorage;
}
var _ParticipantSession = class {
  constructor(ns, resetSession) {
    this.ns = ns;
    this._token = this.strg.getItem(this.tokenKey) || void 0;
    const participantStr = this.strg.getItem(this.partKey) || void 0;
    if (participantStr) {
      this._participant = JSON.parse(participantStr);
    }
    const sess = this.calcSession();
    this._sessions = bsu(sess);
    resetSession.subscribe({
      next: () => {
        this.clearSession();
      }
    });
  }
  get sessions() {
    return this._sessions;
  }
  get session() {
    return this._sessions.getValue();
  }
  get token() {
    return this._token;
  }
  get participant() {
    return this._participant;
  }
  get tokenKey() {
    return `${_ParticipantSession.tokenKey}:${this.ns}`;
  }
  get partKey() {
    return `${_ParticipantSession.partKey}:${this.ns}`;
  }
  updateSession(token, participant) {
    this.strg.setItem(this.tokenKey, token);
    this.strg.setItem(this.partKey, JSON.stringify(participant));
    this._token = token;
    this._participant = participant;
    this._sessions.next(this.calcSession());
  }
  clearSession() {
    delete this._token;
    delete this._participant;
    this.strg.removeItem(this.tokenKey);
    this.strg.removeItem(this.partKey);
    this._sessions.next(void 0);
  }
  calcSession() {
    if (this._token && this._participant) {
      return {
        token: this._token,
        participant: this._participant
      };
    }
    return void 0;
  }
  get strg() {
    return _ParticipantSession.storage;
  }
};
var ParticipantSession = _ParticipantSession;
ParticipantSession.tokenKey = "empirica:token";
ParticipantSession.partKey = "empirica:participant";
ParticipantSession.storage = storage;

// src/player/context.ts
var ParticipantContext = class {
  constructor(url, ns) {
    this.provider = bsu();
    this.globals = bsu();
    this.tajriba = new TajribaConnection(url);
    this.resetSession = new Subject();
    this.session = new ParticipantSession(ns, this.resetSession);
    this.participant = new ParticipantConnection(
      this.tajriba,
      this.session.sessions,
      this.resetSession.next.bind(this.resetSession)
    );
    subscribeAsync(this.participant.connected, async (connected) => {
      const part = this.participant.participant.getValue();
      if (connected && part) {
        if (!this.provider.getValue()) {
          this.provider.next(
            new TajribaProvider(
              part.changes(),
              this.tajriba.tajriba.globalAttributes(),
              part.setAttributes.bind(part)
            )
          );
        }
      } else {
        const provider = this.provider.getValue();
        if (provider) {
          this.provider.next(void 0);
        }
      }
    });
    subscribeAsync(this.tajriba.connected, async (connected) => {
      if (connected) {
        this.globals.next(new Globals(this.tajriba.tajriba.globalAttributes()));
      } else {
        const glob = this.globals.getValue();
        if (glob) {
          this.globals.next(void 0);
        }
      }
    });
  }
  get connecting() {
    return this.participant.connecting;
  }
  get connected() {
    return this.participant.connected;
  }
  async register(playerIdentifier) {
    if (!this.tajriba.connected.getValue()) {
      throw ErrNotConnected;
    }
    const [token, participant] = await this.tajriba.tajriba.registerParticipant(
      playerIdentifier
    );
    if (!token) {
      throw new Error("invalid registration");
    }
    this.session.updateSession(token, participant);
  }
  stop() {
    this.tajriba.stop();
    this.participant.stop();
  }
};
var ParticipantMode = class {
  constructor(participant, provider, modeFunc) {
    this._mode = new BehaviorSubject2(void 0);
    subscribeAsync(provider, async (provider2) => {
      var _a;
      const id = (_a = participant.getValue()) == null ? void 0 : _a.id;
      if (id && provider2 && this._mode.getValue()) {
        warn("spurious provider condition");
        window.location.reload();
      }
      if (id && provider2) {
        this._mode.next(modeFunc(id, provider2));
      } else {
        const mode = this._mode.getValue();
        if (mode) {
          this._mode.next(void 0);
        }
      }
    });
  }
  get mode() {
    return this._mode;
  }
};
var ParticipantModeContext = class extends ParticipantContext {
  constructor(url, ns, modeFunc) {
    super(url, ns);
    this._mode = new ParticipantMode(
      this.participant.participant,
      this.provider,
      modeFunc
    );
  }
  get mode() {
    return this._mode.mode;
  }
};

// src/player/react/EmpiricaParticipant.tsx
var ParticipantCtx = React3.createContext(void 0);
var contexts = {};
function EmpiricaParticipant({
  url,
  ns,
  modeFunc,
  children
}) {
  let partCtx;
  if (ns in contexts) {
    partCtx = contexts[ns];
  } else {
    if (modeFunc) {
      partCtx = new ParticipantModeContext(url, ns, modeFunc);
    } else {
      partCtx = new ParticipantContext(url, ns);
    }
    contexts[ns] = partCtx;
  }
  return /* @__PURE__ */ React3.createElement(ParticipantCtx.Provider, { value: partCtx }, children);
}

// src/player/react/hooks.ts
import { useContext, useEffect, useState } from "react";
import { merge as merge2 } from "rxjs";
function useParticipantContext() {
  return useContext(ParticipantCtx);
}
function useTajribaConnecting() {
  return useTajribaCtxKey("connecting");
}
function useTajribaConnected() {
  return useTajribaCtxKey("connected");
}
function usePartConnected() {
  return usePartCtxKey("connected");
}
function useTajriba() {
  const ctx = useParticipantContext();
  return ctx == null ? void 0 : ctx.tajriba;
}
function useGlobal() {
  const ctx = usePartCtxKey("globals");
  const [val, setVal] = useState({ g: void 0 });
  useEffect(() => {
    if (!ctx || !ctx.self) {
      return;
    }
    const sub = ctx.self.subscribe({
      next(g) {
        setVal({ g });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return val.g;
}
var defaultConsentKey = "empirica:consent";
function useConsent(ns = "") {
  const key = `${defaultConsentKey}${ns ? `:${ns}` : ""}`;
  const getConsented = () => Boolean(window.localStorage[key]);
  const [consented, setConsented] = useState(getConsented());
  function onConsent() {
    window.localStorage[key] = true;
    setConsented(true);
  }
  return [consented, consented ? void 0 : onConsent];
}
function usePlayerID() {
  const ctx = useParticipantContext();
  const [connecting, setConnecting] = useState(true);
  const [playerID, setPlayerID] = useState(void 0);
  const [changePlayerID, setChangePlayerID] = useState(void 0);
  useEffect(() => {
    if (!ctx) {
      return;
    }
    let _connecting = true;
    let session;
    const sub = merge2(
      ctx.participant.connecting,
      ctx.session.sessions
    ).subscribe({
      next(sessionOrConnecting) {
        if (typeof sessionOrConnecting === "boolean") {
          setConnecting(sessionOrConnecting);
          _connecting = sessionOrConnecting;
        } else {
          session = sessionOrConnecting;
        }
        if (_connecting) {
          setPlayerID(void 0);
          setChangePlayerID(void 0);
        } else if (!session) {
          setPlayerID(void 0);
          setChangePlayerID(() => async (playerIdentifier) => {
            await ctx.register(playerIdentifier);
          });
        } else {
          setPlayerID(session.participant.identifier);
          setChangePlayerID(void 0);
        }
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return [connecting, playerID, changePlayerID];
}
function useTajribaCtxKey(name) {
  return useCtxKey(useTajriba, name);
}
function usePartCtxKey(name) {
  return useCtxKey(useParticipantContext, name);
}
function useCtxKey(ctxFunc, name) {
  const ctx = ctxFunc();
  const [val, setVal] = useState(void 0);
  useEffect(() => {
    if (!ctx || !ctx[name]) {
      return;
    }
    const obs = ctx[name];
    const sub = obs.subscribe({
      next(g) {
        setVal(g);
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return val;
}

// src/player/react/Loading.tsx
import React4 from "react";
function Loading() {
  return /* @__PURE__ */ React4.createElement("div", { className: "h-full w-full flex items-center justify-center" }, /* @__PURE__ */ React4.createElement(
    "svg",
    {
      width: "44",
      height: "44",
      viewBox: "0 0 44 44",
      xmlns: "http://www.w3.org/2000/svg",
      className: "text-empirica-200 stroke-current"
    },
    /* @__PURE__ */ React4.createElement("g", { fill: "none", fillRule: "evenodd", strokeWidth: "2" }, /* @__PURE__ */ React4.createElement("circle", { cx: "22", cy: "22", r: "1" }, /* @__PURE__ */ React4.createElement(
      "animate",
      {
        attributeName: "r",
        begin: "0s",
        dur: "1.8s",
        values: "1; 20",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.165, 0.84, 0.44, 1",
        repeatCount: "indefinite"
      }
    ), /* @__PURE__ */ React4.createElement(
      "animate",
      {
        attributeName: "stroke-opacity",
        begin: "0s",
        dur: "1.8s",
        values: "1; 0",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.3, 0.61, 0.355, 1",
        repeatCount: "indefinite"
      }
    )), /* @__PURE__ */ React4.createElement("circle", { cx: "22", cy: "22", r: "1" }, /* @__PURE__ */ React4.createElement(
      "animate",
      {
        attributeName: "r",
        begin: "-0.9s",
        dur: "1.8s",
        values: "1; 20",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.165, 0.84, 0.44, 1",
        repeatCount: "indefinite"
      }
    ), /* @__PURE__ */ React4.createElement(
      "animate",
      {
        attributeName: "stroke-opacity",
        begin: "-0.9s",
        dur: "1.8s",
        values: "1; 0",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.3, 0.61, 0.355, 1",
        repeatCount: "indefinite"
      }
    )))
  ));
}

// src/player/react/NoGames.tsx
import React5 from "react";
function NoGames() {
  return /* @__PURE__ */ React5.createElement("div", { className: "h-screen flex items-center justify-center" }, /* @__PURE__ */ React5.createElement("div", { className: "w-92 flex flex-col items-center" }, /* @__PURE__ */ React5.createElement("h2", { className: "text-gray-700 font-medium" }, "No experiments available"), /* @__PURE__ */ React5.createElement("p", { className: "mt-2 text-gray-400 text-justify" }, "There are currently no available experiments. Please wait until an experiment becomes available or come back at a later date."), isDevelopment ? /* @__PURE__ */ React5.createElement("p", { className: "mt-4 text-gray-700" }, "Go to", " ", /* @__PURE__ */ React5.createElement(
    "a",
    {
      href: "/admin",
      target: "empirica-admin",
      className: "text-empirica-500"
    },
    "Admin"
  ), " ", "to get started") : ""));
}

// src/player/react/PlayerCreate.tsx
import React6, { useState as useState2 } from "react";
function PlayerCreate({ onPlayerID, connecting }) {
  const [playerID, setPlayerID] = useState2("");
  const handleSubmit = (evt) => {
    evt.preventDefault();
    if (!playerID || playerID.trim() === "") {
      return;
    }
    onPlayerID(playerID);
  };
  return /* @__PURE__ */ React6.createElement("div", { className: "min-h-screen bg-empirica-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" }, /* @__PURE__ */ React6.createElement("div", { className: "sm:mx-auto sm:w-full sm:max-w-md" }, /* @__PURE__ */ React6.createElement("h2", { className: "mt-6 text-center text-3xl font-extrabold text-gray-900" }, "Enter your Player Identifier")), /* @__PURE__ */ React6.createElement("div", { className: "mt-8 sm:mx-auto sm:w-full sm:max-w-md" }, /* @__PURE__ */ React6.createElement("div", { className: "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" }, /* @__PURE__ */ React6.createElement(
    "form",
    {
      className: "space-y-6",
      action: "#",
      method: "POST",
      onSubmit: handleSubmit
    },
    /* @__PURE__ */ React6.createElement("fieldset", { disabled: connecting }, /* @__PURE__ */ React6.createElement("div", null, /* @__PURE__ */ React6.createElement(
      "label",
      {
        htmlFor: "email",
        className: "block text-sm font-medium text-gray-700"
      },
      "Identifier"
    ), /* @__PURE__ */ React6.createElement("div", { className: "mt-1" }, /* @__PURE__ */ React6.createElement(
      "input",
      {
        id: "playerID",
        name: "playerID",
        type: "text",
        autoComplete: "off",
        required: true,
        autoFocus: true,
        className: "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm",
        value: playerID,
        onChange: (e) => setPlayerID(e.target.value)
      }
    ), /* @__PURE__ */ React6.createElement(
      "p",
      {
        className: "mt-2 text-sm text-gray-500",
        id: "playerID-description"
      },
      "This should be given to you. E.g. email, code..."
    ))), /* @__PURE__ */ React6.createElement("div", null, /* @__PURE__ */ React6.createElement(
      "button",
      {
        type: "submit",
        className: "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-empirica-600 hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500"
      },
      "Enter"
    )))
  ))));
}

export {
  Consent,
  Finished,
  EmpiricaParticipant,
  useParticipantContext,
  useTajribaConnecting,
  useTajribaConnected,
  usePartConnected,
  useTajriba,
  useGlobal,
  useConsent,
  usePlayerID,
  Loading,
  NoGames,
  PlayerCreate
};
//# sourceMappingURL=chunk-ARSVPGKY.js.map