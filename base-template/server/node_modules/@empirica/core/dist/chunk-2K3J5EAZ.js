import {
  Consent,
  Finished,
  Loading,
  NoGames,
  PlayerCreate,
  useConsent,
  useGlobal,
  usePartConnected,
  useParticipantContext,
  usePlayerID,
  useTajribaConnected
} from "./chunk-ARSVPGKY.js";
import {
  error,
  warn
} from "./chunk-I6L7V5LM.js";

// src/player/classic/react/EmpiricaContext.tsx
import React3 from "react";

// src/player/classic/react/hooks.ts
import { useEffect, useRef, useState } from "react";
function usePlayer() {
  return usePartModeCtxKey("player");
}
function useGame() {
  return usePartModeCtxKey("game");
}
function useRound() {
  return usePartModeCtxKey("round");
}
function useStage() {
  return usePartModeCtxKey("stage");
}
function useStageTimer() {
  var _a;
  const stage = useStage();
  const [val, setVal] = useState({
    tick: (_a = stage == null ? void 0 : stage.timer) == null ? void 0 : _a.current
  });
  const timerSubscription = useRef(null);
  useEffect(() => {
    if (!stage || !stage.timer) {
      return;
    }
    if (timerSubscription.current === null) {
      timerSubscription.current = stage.timer.obs().subscribe({
        next(val2) {
          setVal({ tick: val2 });
        }
      });
    }
    return () => {
      var _a2;
      (_a2 = timerSubscription == null ? void 0 : timerSubscription.current) == null ? void 0 : _a2.unsubscribe.bind(timerSubscription.current);
      timerSubscription.current = null;
    };
  }, [stage == null ? void 0 : stage.timer]);
  return val.tick;
}
function usePlayers() {
  return usePartModeCtxKey(
    "players"
  );
}
function usePartModeCtx() {
  var _a;
  const ctx = useParticipantContext();
  const [mode, setMode] = useState({
    data: (_a = ctx == null ? void 0 : ctx.mode) == null ? void 0 : _a.getValue()
  });
  useEffect(() => {
    if (!ctx || !ctx.mode) {
      return;
    }
    const sub = ctx.mode.subscribe({
      next(m) {
        setMode({ data: m });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return mode.data;
}
function usePartModeCtxKey(name) {
  const mode = usePartModeCtx();
  const iniVal = mode && mode[name];
  const [val, setVal] = useState({
    data: iniVal == null ? void 0 : iniVal.getValue()
  });
  useEffect(() => {
    if (!mode) {
      return;
    }
    const obs = mode[name];
    const sub = obs.subscribe({
      next(val2) {
        setVal({ data: val2 });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [mode]);
  return val.data;
}

// src/player/classic/react/Lobby.tsx
import React from "react";
function Lobby() {
  const player = usePlayer();
  if (!player) {
    return /* @__PURE__ */ React.createElement(Loading, null);
  }
  const treatment = player.get("treatment");
  if (!treatment || !treatment.playerCount) {
    warn("lobby: no treatment found on player");
    return /* @__PURE__ */ React.createElement(Loading, null);
  }
  return /* @__PURE__ */ React.createElement("div", { className: "flex h-full items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 640 512",
      className: "mx-auto h-12 w-12 text-gray-400",
      stroke: "none",
      fill: "currentColor",
      "aria-hidden": "true"
    },
    /* @__PURE__ */ React.createElement("path", { d: "M544 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zM320 256c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm0-192c44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80 35.9-80 80-80zm244 192h-40c-15.2 0-29.3 4.8-41.1 12.9 9.4 6.4 17.9 13.9 25.4 22.4 4.9-2.1 10.2-3.3 15.7-3.3h40c24.2 0 44 21.5 44 48 0 8.8 7.2 16 16 16s16-7.2 16-16c0-44.1-34.1-80-76-80zM96 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm304.1 180c-33.4 0-41.7 12-80.1 12-38.4 0-46.7-12-80.1-12-36.3 0-71.6 16.2-92.3 46.9-12.4 18.4-19.6 40.5-19.6 64.3V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-44.8c0-23.8-7.2-45.9-19.6-64.3-20.7-30.7-56-46.9-92.3-46.9zM480 432c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16v-44.8c0-16.6 4.9-32.7 14.1-46.4 13.8-20.5 38.4-32.8 65.7-32.8 27.4 0 37.2 12 80.2 12s52.8-12 80.1-12c27.3 0 51.9 12.3 65.7 32.8 9.2 13.7 14.1 29.8 14.1 46.4V432zM157.1 268.9c-11.9-8.1-26-12.9-41.1-12.9H76c-41.9 0-76 35.9-76 80 0 8.8 7.2 16 16 16s16-7.2 16-16c0-26.5 19.8-48 44-48h40c5.5 0 10.8 1.2 15.7 3.3 7.5-8.5 16.1-16 25.4-22.4z" })
  ), /* @__PURE__ */ React.createElement("h3", { className: "mt-2 text-sm font-medium text-gray-900" }, treatment.playerCount > 1 ? "Waiting for other players" : "Game loading"), /* @__PURE__ */ React.createElement("p", { className: "mt-1 text-sm text-gray-500" }, "Please wait for the game to be ready.")));
}

// src/player/classic/react/Steps.tsx
import React2 from "react";
function Steps({
  steps,
  progressKey,
  doneKey,
  object,
  children
}) {
  let obj;
  const game = useGame();
  const player = usePlayer();
  if (object) {
    obj = object;
  } else if (player) {
    obj = player;
  } else {
    error("no receiver and no player in Steps");
    return /* @__PURE__ */ React2.createElement("div", null, "Missing attribute");
  }
  if (obj.get(doneKey)) {
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
  }
  let actualSteps = steps;
  if (typeof steps === "function") {
    actualSteps = steps({ game, player });
    if (!actualSteps) {
      obj.set(doneKey, true);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    }
  }
  const index = obj.get(progressKey) || 0;
  if (actualSteps.length === 0 || index >= actualSteps.length) {
    obj.set(doneKey, true);
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
  }
  const Step = actualSteps[index];
  if (!Step) {
    error("missing step at index");
    return /* @__PURE__ */ React2.createElement("div", null, "Step missing");
  }
  const next = () => {
    if (index + 1 >= actualSteps.length) {
      obj.set(doneKey, true);
    } else {
      obj.set(progressKey, index + 1);
    }
  };
  const previous = () => {
    if (index > 0) {
      obj.set(progressKey, index - 1);
    }
  };
  return /* @__PURE__ */ React2.createElement(Step, { index, previous, next });
}

// src/player/classic/react/EmpiricaContext.tsx
function EmpiricaContext({
  noGames: NoGamesComp = NoGames,
  consent: ConsentComp = Consent,
  playerCreate: PlayerCreateForm = PlayerCreate,
  introSteps = [],
  lobby = Lobby,
  exitSteps = [],
  finished = Finished,
  loading: LoadingComp = Loading,
  connecting: ConnectingComp = Loading,
  unmanagedGame = false,
  unmanagedAssignment = false,
  disableConsent = false,
  disableNoGames = false,
  disableURLParamsCapture = false,
  children
}) {
  const tajribaConnected = useTajribaConnected();
  const participantConnected = usePartConnected();
  const globals = useGlobal();
  const player = usePlayer();
  const game = useGame();
  const [connecting, hasPlayer, onPlayerID] = usePlayerID();
  const [consented, onConsent] = useConsent();
  if (!tajribaConnected) {
    return /* @__PURE__ */ React3.createElement(ConnectingComp, null);
  }
  if (player && player.get("ended")) {
    return /* @__PURE__ */ React3.createElement(Exit, { exitSteps, finished });
  }
  if (!globals || participantConnected && !player) {
    return /* @__PURE__ */ React3.createElement(LoadingComp, null);
  }
  if (!disableNoGames && !game && !globals.get("experimentOpen")) {
    return /* @__PURE__ */ React3.createElement(NoGamesComp, null);
  }
  if (!disableConsent && !consented) {
    return /* @__PURE__ */ React3.createElement(ConsentComp, { onConsent });
  }
  if (!player && (!hasPlayer || connecting)) {
    return /* @__PURE__ */ React3.createElement(PlayerCreateForm, { onPlayerID, connecting });
  }
  if (!player) {
    return /* @__PURE__ */ React3.createElement(LoadingComp, null);
  }
  if (!disableURLParamsCapture && !player.get("urlParams")) {
    const urlParams = new URLSearchParams(window.location.search);
    player.set("urlParams", Object.fromEntries(urlParams.entries()));
  }
  if (unmanagedAssignment) {
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, children);
  }
  if (game && game.hasEnded) {
    return /* @__PURE__ */ React3.createElement(Exit, { exitSteps, finished });
  }
  return /* @__PURE__ */ React3.createElement(Steps, { progressKey: "intro", doneKey: "introDone", steps: introSteps }, /* @__PURE__ */ React3.createElement(
    EmpiricaInnerContext,
    {
      exitSteps,
      lobby,
      finished,
      loading: LoadingComp,
      unmanagedGame
    },
    children
  ));
}
function EmpiricaInnerContext({
  children,
  lobby: Lobby2,
  finished,
  exitSteps,
  loading: LoadingComp,
  unmanagedGame = false
}) {
  const game = useGame();
  const stage = useStage();
  const round = useRound();
  if (!game) {
    return /* @__PURE__ */ React3.createElement(Lobby2, null);
  }
  if (game.hasEnded) {
    return /* @__PURE__ */ React3.createElement(Exit, { exitSteps, finished });
  }
  if (!unmanagedGame && (!stage || !round)) {
    return /* @__PURE__ */ React3.createElement(LoadingComp, null);
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, children);
}
function Exit({
  exitSteps,
  finished: Finished2
}) {
  return /* @__PURE__ */ React3.createElement(Steps, { progressKey: "exitStep", doneKey: "exitStepDone", steps: exitSteps }, /* @__PURE__ */ React3.createElement(Finished2, null));
}

// src/player/classic/react/examples/Sweeper.tsx
import React4, { useEffect as useEffect2 } from "react";
var buttonStyle = {
  width: 40,
  height: 40,
  backgroundColor: "#888",
  color: "black",
  verticalAlign: "top",
  fontSize: "32px",
  borderLeft: "5px solid rgb(220,220,220)",
  borderTop: "5px solid rgb(220,220,220)",
  borderBottom: "5px solid #333",
  borderRight: "5px solid #333",
  display: "inline-block"
};
var visitStyle = {
  width: 40,
  height: 40,
  itemsAlign: "center",
  backgroundColor: "#555",
  color: "white",
  fontWeight: "bold",
  border: "1px solid black",
  verticalAlign: "top",
  fontSize: "24px",
  display: "inline-block"
};
function Sweeper() {
  const round = useRound();
  if (!round) {
    return null;
  }
  const player = usePlayer();
  if (!player) {
    return null;
  }
  const visited = round.get("visited");
  const bombs = round.get("bombs");
  const lost = round.get("lost");
  useEffect2(function() {
    generateBombs();
  }, []);
  function generateBombs() {
    if (bombs || !round) {
      return;
    }
    let bombArr = new Array(10).fill(0).map(() => new Array(10).fill(0));
    for (let i = 0; i < bombArr.length; i++) {
      let bombPos = Math.floor(Math.random() * 10);
      bombArr[i][bombPos] = "X";
    }
    for (let i = 0; i < bombArr.length; i++) {
      for (let j = 0; j < bombArr[i].length; j++) {
        if (bombArr[i][j] !== "X") {
          let sum = 0;
          if (i > 0 && bombArr[i - 1][j] == "X")
            sum++;
          if (i < bombArr.length - 1 && bombArr[i + 1][j] == "X")
            sum++;
          if (j < bombArr.length - 1 && bombArr[i][j + 1] == "X")
            sum++;
          if (j > 0 && bombArr[i][j - 1] == "X")
            sum++;
          if (i < bombArr.length - 1 && j > 0 && bombArr[i + 1][j - 1] == "X")
            sum++;
          if (i < bombArr.length - 1 && j < bombArr.length - 1 && bombArr[i + 1][j + 1] == "X")
            sum++;
          if (i > 0 && j > 0 && bombArr[i - 1][j - 1] == "X")
            sum++;
          if (i > 0 && j < bombArr.length - 1 && bombArr[i - 1][j + 1] == "X")
            sum++;
          bombArr[i][j] = sum;
        }
      }
    }
    round.set("bombs", bombArr);
    let cover = Array(10).fill(0).map(() => Array(10).fill(0));
    round.set("visited", cover);
  }
  const visitCell = (i, j) => {
    if (lost || !bombs || !visited) {
      return;
    }
    if (bombs[i][j] === "X") {
      round.set("lost", true);
    }
    dfsCells(i, j);
    visited[i][j] = 1;
    round.set("visited", [...visited]);
  };
  function dfsCells(i, j) {
    if (!round || !bombs || !visited) {
      return;
    }
    if (i < 0 || i > visited.length - 1 || j < 0 || j > visited[0].length - 1 || visited[i][j] == 1 || bombs[i][j] == "X")
      return;
    visited[i][j] = 1;
    round.set("visited", [...visited]);
    if (bombs[i][j] < 1) {
      dfsCells(i + 1, j);
      dfsCells(i - 1, j);
      dfsCells(i, j + 1);
      dfsCells(i, j - 1);
    }
  }
  if (!bombs) {
    return null;
  }
  return /* @__PURE__ */ React4.createElement("div", { className: "text-sm relative" }, lost ? /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement("div", { className: "absolute h-full w-full flex items-center justify-center text-6xl white font-black bg-opacity-50 bg-gray-300" }, "YOU LOST"), /* @__PURE__ */ React4.createElement("div", { className: "absolute h-full w-full flex items-center justify-center text-6xl white font-black mt-1 ml-1 text-white" }, "YOU LOST")) : "", bombs.map((arr, index) => /* @__PURE__ */ React4.createElement("div", { key: index }, arr.map((_, i) => /* @__PURE__ */ React4.createElement(
    "div",
    {
      key: i,
      onClick: () => visitCell(index, i),
      style: visited[index][i] == 0 ? buttonStyle : visitStyle
    },
    /* @__PURE__ */ React4.createElement("div", { className: "h-full w-full flex items-center justify-center" }, visited[index][i] == 0 ? null : bombs[index][i] == 0 ? "" : bombs[index][i])
  )))));
}

// src/player/classic/react/Quiz.tsx
import React5, { useState as useState2 } from "react";
function Quiz({ next }) {
  const labelClassName = "block text-sm font-medium text-gray-700 mb-2";
  const inputClassName = "appearance-none block px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm";
  const [sum, setSum] = useState2("");
  const [horse, setHorse] = useState2("");
  function handleSubmit(e) {
    e.preventDefault();
    if (sum !== "4" || horse !== "white") {
      alert("Incorrect! Read the instructions and please try again.");
    } else {
      next();
    }
  }
  return /* @__PURE__ */ React5.createElement("div", { className: "flex justify-center" }, /* @__PURE__ */ React5.createElement("div", { className: "mt-6 sm:mt-24" }, /* @__PURE__ */ React5.createElement("h3", { className: "text-2xl font-semi-bold text-gray-900" }, "Quiz"), /* @__PURE__ */ React5.createElement("form", { className: "mt-4", onSubmit: handleSubmit }, /* @__PURE__ */ React5.createElement("p", { className: "mb-5" }, /* @__PURE__ */ React5.createElement("label", { className: labelClassName }, "What is 2+2?"), /* @__PURE__ */ React5.createElement(
    "input",
    {
      className: inputClassName,
      type: "text",
      dir: "auto",
      id: "sum",
      name: "sum",
      placeholder: "e.g. 3",
      value: sum,
      onChange: (e) => setSum(e.target.value),
      autoComplete: "off",
      autoFocus: true,
      required: true
    }
  )), /* @__PURE__ */ React5.createElement("p", { className: "mb-5" }, /* @__PURE__ */ React5.createElement("label", { className: labelClassName }, "What color was Napoleon's white horse?"), /* @__PURE__ */ React5.createElement(
    "input",
    {
      className: inputClassName,
      type: "text",
      dir: "auto",
      id: "horse",
      name: "horse",
      placeholder: "brown",
      value: horse,
      onChange: (e) => setHorse(e.target.value),
      autoComplete: "off",
      required: true
    }
  )), /* @__PURE__ */ React5.createElement(
    "button",
    {
      type: "submit",
      className: "inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500"
    },
    "Submit"
  ))));
}

// src/player/classic/react/Slider.tsx
import React6, { useRef as useRef2 } from "react";
function Slider({
  value,
  onChange,
  min = 0,
  max = 100,
  stepSize = 1,
  disabled = false
}) {
  const noVal = value === null || value === void 0;
  const val = noVal ? (max - min) / 2 : value;
  const cls = noVal ? "slider-thumb-zero" : "slider-thumb";
  const ref = useRef2(null);
  if (value !== null && ref.current) {
    const nmin = min ? min : 0;
    const nmax = max ? max : 100;
    const newVal = Number((value - nmin) * 100 / (nmax - nmin));
    ref.current.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;
  }
  return /* @__PURE__ */ React6.createElement("div", { className: "relative w-full" }, /* @__PURE__ */ React6.createElement(
    "input",
    {
      className: cls,
      type: "range",
      min,
      max,
      step: stepSize,
      value: val,
      onChange,
      disabled
    }
  ), noVal ? "" : /* @__PURE__ */ React6.createElement(
    "output",
    {
      ref,
      className: "font-mono absolute w-12 h-7 flex items-center justify-center left-1/2 bottom-7 rounded transform -translate-x-1/2 bg-gray-200"
    },
    value
  ));
}

export {
  usePlayer,
  useGame,
  useRound,
  useStage,
  useStageTimer,
  usePlayers,
  usePartModeCtx,
  usePartModeCtxKey,
  Lobby,
  Steps,
  EmpiricaContext,
  Sweeper,
  Quiz,
  Slider
};
//# sourceMappingURL=chunk-2K3J5EAZ.js.map